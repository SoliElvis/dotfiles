#+PROPERTY: headers-args :tangle dotorg.el
#+SEQ_TODO: urgent(u) PROJ(p) STARTED(s)  NEXT(n) TODO(t)  MIDWAY(m) WAITING(w) SOMEDAY(h)  | DONE(d@) DEFERRED(l@) CANCELLED(c@)

* config
  :PROPERTIES:
  :headers-args: :tangle yes :results output
  :END:

** basic org
   :PROPERTIES:
   :headers-args: :tangle yes :results output
   :END:
   
*** basic basic
    #+begin_src emacs-lisp :tangle yes
      (require 'org-bullets)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)
         (shell . t)))
      (require 'ob-shell)
      (require 'ox-md)
      (doom-themes-org-config)
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

      (setq org-element-use-cache nil)
      (use-package org
        :init
        (setq org-use-speed-commands t
              org-return-follows-link t
              org-hide-emphasis-markers t
              org-completion-use-ido t
              org-agenda-files '("~/cloud/.personal/agenda")
              org-outline-path-complete-in-steps nil
              org-src-fontify-natively t   ;; Pretty code blocks
              org-src-tab-acts-natively t
              org-confirm-babel-evaluate nil
              org-books-file "~/cloud/.personal/my-list.org"
              org-hide-emphasis-markers t))
      (setq org-cycle-separator-lines 2)
 ;;     (setq ("%latex -interaction nonstopmode -output-directory %o %f" "%bib %b"
  ;;     "%latex -interaction nonstopmode -output-directory %o %f" "%latex
   ;;   -interaction nonstopmode -output-directory %o %f")
 ;;)
    #+end_src

    #+RESULTS:
    : 2


*** org multiline bold

    https://hugo-sandbox.netlify.com/posts/multi-line-bold/
    #+begin_src elisp
      (with-eval-after-load 'org
        ;; Allow multiple line Org emphasis markup.
        ;; http://emacs.stackexchange.com/a/13828/115
        (setcar (nthcdr 4 org-emphasis-regexp-components) 20) ;Up to 20 lines, default is just 1
        ;; Below is needed to apply the modified `org-emphasis-regexp-components'
        ;; settings from above.
        (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components))

    #+end_src

*** agenda
    #+BEGIN_SRC elisp :tangle yes
      (setq org-agenda-files '("home/sole/cloud/.personal/agenda/"))
    #+END_SRC

    #+RESULTS:
    : t

**** various
     #+BEGIN_SRC elisp :tangle yes
       (use-package org-agenda
         :after org
         :bind (:map org-agenda-mode-map
                     ("X" . my/org-agenda-mark-done-and-add-followup)
                     ("x" . my/org-agenda-done))
         :preface
         (defun my/org-agenda-done (&optional arg)
           "Mark current TODO as done.
                              This changes the line at point, all other lines in the agenda referring to
                              the same tree node, and the headline of the tree node in the Org-mode file."
           (interactive "P")
           (org-agenda-todo "DONE"))

         (defun my/org-agenda-mark-done-and-add-followup ()
           "Mark the current TODO as done and add another task after it.
                               Creates it at the same level as the previous task, so it's better to use
                               this with to-do items than with projects or headings."
           (interactive)
           (org-agenda-todo "DONE")
           (org-agenda-switch-to)
           (org-capture 0 "t"))
         :custom
         (org-agenda-dim-blocked-tasks t)
         (org-agenda-inhibit-startup t)
         (org-agenda-show-log t)
         (org-agenda-skip-deadline-if-done t)
         (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
         (org-agenda-skip-scheduled-if-done nil)
         (org-agenda-span 2)
         (org-agenda-start-on-weekday 6)
         (org-agenda-sticky nil)
         (org-agenda-tags-column -100)
         (org-agenda-time-grid '((daily today require-timed)))
         (org-agenda-use-tag-inheritance t)
         (org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS")
         (org-default-notes-file "~/cloud/.personal/agenda/organizer.org")
         (org-directory "~/cloud/.personal")
         (org-enforce-todo-dependencies t)
         (org-habit-graph-column 80)
         (org-habit-show-habits-only-for-today nil)
         (org-track-ordered-property-with-tag t))
     #+END_SRC

     #+RESULTS:
     : my/org-agenda-done



*** STARTED contacts
    :PROPERTIES:
    :reddit:   https://www.reddit.com/r/emacs/comments/8toivy/tip_how_to_manage_your_contacts_with_orgcontacts/
    :END:
    :LOGBOOK:
    CLOCK: [2019-06-21 Fri 13:05]--[2019-06-21 Fri 13:56] =>  0:51
    CLOCK: [2019-06-21 Fri 12:56]--[2019-06-21 Fri 13:02] =>  0:06
    :END:

    
**** basic load                                                     :capture:
     #+begin_src elisp
       (use-package org-contacts
         :ensure nil
         :after org
         :custom (org-contacts-files '("~/cloud/.personal/agenda/contacts.org")))
     #+end_src



     #+RESULTS:


*** bibstuff
    #+begin_src elisp :tangle yes
      (setq reftex-default-bibliography '("~/cloud/.bibstuff/references.bib"))

      (setq org-ref-bibliography-notes "~/cloud/.bibstuff/orgRefNotes.org"
            org-ref-default-bibliography '("~/cloud/.bibstuff/references.bib")
            org-ref-pdf-directory "~/cloud/zotf_ile")

      (setq bibtex-completion-bibliography '("~/cloud/.bibstuff/references.bib")
            bibtex-completion-library-path "~/cloud/zotf_ile"
            bibtex-completion-notes-path "~/cloud/.bibstuff/helm-bibtex-notes")

      (setq bibtex-completion-pdf-field "file")
      (setq bibtex-completion-pdf-open-function
            (lambda (fpath)
              (start-process "evince" "*helm-bibtex-evince*" "/usr/bin/evince"
                             fpath)))
      (setq bibtex-dialect 'biblatex)

      (setq bibtex-completion-format-citation-functions
            '((org-mode      . bibtex-completion-format-citation-org-link-to-PDF)
              (latex-mode    . bibtex-completion-format-citation-cite)
              (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
              (default       . bibtex-completion-format-citation-default)))

    #+end_src

    #+RESULTS:
    : ((org-mode . bibtex-completion-format-citation-org-link-to-PDF) (latex-mode . bibtex-completion-format-citation-cite) (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc) (default . bibtex-completion-format-citation-default))


*** cal                                                              :broken:
    #+begin_src elisp :tangle no
      (use-package org-caldav
        :init
        (setq org-caldav-url
              "https://free01.thegood.cloud/remote.php/dav/calendars/frederic.boileau@protonmail.com")
        ;;let filenames =
        (setq org-caldav-calendars
              '((:calendar-id "appointments"
                              :files ("~/cloud/.personal/agenda/appointments.org")
                              :inbox "~/cloud/.personal/org-caldav/cal-appointments.org")

                (:calendar-id "koios"
                              :files ("~/cloud/.personal/agenda/koios.org")
                              :inbox "~/cloud/.personal/org-caldav/cal-koios-repeat.org"))

              org-caldav-save-directory "~/cloud/.personal/org-caldav"
              ;;         (setq org-icalendar-alarm-time 1)
              org-icalendar-include-todo t
              ;;         (setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due))
              ;; ;;
              org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo)))
      (load-theme 'doom-nord t)
    #+end_src

    #+RESULTS:
    : t

****  cal backup
     #+begin_src elisp :tangle no

       ;; (:calendar-id "life-school"
       ;;               :files ("~/cloud/.personal/agenda/life.org"
       ;;                       "~/cloud/.personal/agenda/school.org")
       ;;               :inbox  "~/cloud/.personal/org-caldav/cal-life-school.org")

       ;; (:calendar-id "repeat"
       ;; :files ("~/cloud/.personal/agenda/repeat.org")
       ;; :inbox "~/cloud/.personal/org-caldav/cal-repeat.org"))
     #+end_src


*** org face
    #+BEGIN_SRC elisp :tangle yes
      (use-package org-faces
        :after org
        :custom
        (org-todo-keyword-faces
         '(("DONE" . (:foreground "cyan" :weight bold))
           ("SOMEDAY" . (:foreground "gray" :weight bold))
           ("TODO" . (:foreground "green" :weight bold))
           ("WAITING" . (:foreground "red" :weight bold))
           ("STARTED" . (:foreground "cyan" :weight normal))
           ("NEXT" . (:foreground "cyan" :weight bold)))))
    #+end_src


    #+BEGIN_SRC elisp :tangle yes
      (let* ((variable-tuple (cond ((x-list-fonts   "Source Sans Pro") '(:font   "Source Sans Pro"))
                                   ((x-list-fonts   "Lucida Grande")   '(:font   "Lucida Grande"))
                                   ((x-list-fonts   "Verdana")         '(:font   "Verdana"))
                                   ((x-family-fonts "Sans Serif")      '(:family "Sans Serif"))
                                   (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro.")))) (base-font-color (face-foreground 'default nil 'default))
                                   (headline       `(:inherit default :weight normal :foreground ,base-font-color)))

        (custom-theme-set-faces
         'user
         `(org-level-8        ((t (,@headline ,@variable-tuple))))
         `(org-level-7        ((t (,@headline ,@variable-tuple))))
         `(org-level-6        ((t (,@headline ,@variable-tuple))))
         `(org-level-5        ((t (,@headline ,@variable-tuple))))
         `(org-level-4        ((t (,@headline ,@variable-tuple :height 1.1))))
         `(org-level-3        ((t (,@headline ,@variable-tuple :height 1.25))))
         `(org-level-2        ((t (,@headline ,@variable-tuple :height 1.5))))
         `(org-level-1        ((t (,@headline ,@variable-tuple :height 1.70))))
         `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
    #+END_SRC

    #+RESULTS:


*** clock
    :LOGBOOK:
    CLOCK: [2019-06-17 Mon 23:26]--[2019-06-17 Mon 23:26] =>  0:00
    :END:

    #+BEGIN_SRC elisp :tangle yes
      (use-package org-clock
        :preface
        (defun my/org-mode-ask-effort ()
          "Ask for an effort estimate when clocking in."
          (unless (org-entry-get (point) "Effort")
            (let ((effort
                   (completing-read
                    "Effort: "
                    (org-entry-get-multivalued-property (point) "Effort"))))
              (unless (equal effort "")
                (org-set-property "Effort" effort)))))
        :hook (org-clock-in-prepare-hook . my/org-mode-ask-effort)
        :custom
        (org-clock-clocktable-default-properties
         '(:block day :maxlevel 2 :scope agenda :link t :compact t :formula %
                  :step day :fileskip0 t :stepskip0 t :narrow 80
                  :properties ("Effort" "CLOCKSUM" "CLOCKSUM_T" "TODO")))
        (org-clock-continuously nil)
        (org-clock-in-switch-to-state "STARTED")
        (org-clock-out-remove-zero-time-clocks t)
        (org-clock-persist t)
        (org-clock-persist-file "~/cloud/.personal/agenda/.clock")
        (org-clock-persist-query-resume nil)
        (org-clock-report-include-clocking-task t)
        (org-show-notification-handler (lambda (msg) (alert msg))))
      ;; global Effort estimate values
      (setq org-global-properties
            '(("Effort_ALL" .
               "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")))
      ;; Set default column view headings: Task Priority Effort Clock_Summary
      (setq org-columns-default-format "%50ITEM(Task) %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM")
    #+END_SRC

    #+RESULTS:
    : %50ITEM(Task) %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM


*** clock and related
    #+BEGIN_SRC elisp :tangle yes
      (use-package org-mru-clock
        :bind* (("C-c C-x i" . org-mru-clock-in)
                ("C-c C-x C-j" . org-mru-clock-select-recent-task))
        :init
        (setq org-mru-clock-how-many 100
              org-mru-clock-completing-read #'ivy-completing-read))
      (setq org-clock-history-length 23)
      (defun eos/org-clock-in ()
        (interactive)
        (org-clock-in '(4)))
      (global-set-key (kbd "C-c I") #'eos/org-clock-in)
      (global-set-key (kbd "C-c O") #'org-clock-out)
      (org-clock-persistence-insinuate)
      (setq org-clock-persist t)
      (setq org-clock-in-resume t)
      (setq org-clock-persist-query-resume nil)
      (defun meeting-notes ()
        (interactive)
        (outline-mark-subtree)                              ;; Select org-mode section
        (narrow-to-region (region-beginning) (region-end))  ;; Only show that region
        (deactivate-mark)
        (delete-other-windows)                              ;; Get rid of other windows
        (text-scale-set 2)                                  ;; Text is now readable by others
        (fringe-mode 0)
        (message "When finished taking your notes, run meeting-done."))
      (defun meeting-done ()
        (interactive)
        (widen)                                       ;; Opposite of narrow-to-region
        (text-scale-set 0)                            ;; Reset the font size increase
        (fringe-mode 1)
        (winner-undo))
      (defun org-archive-done-tasks ()
        (interactive)
        (org-map-entries
         (lambda ()
           (org-archive-subtree)
           (setq org-map-continue-from (outline-previous-heading)))
         "/DONE" 'agenda))

      (let* ((variable-tuple
              (cond ((x-list-fonts   "Source Sans Pro") '(:font   "Source Sans Pro"))
                    ((x-list-fonts   "Lucida Grande")   '(:font   "Lucida Grande"))
                    ((x-list-fonts   "Verdana")         '(:font   "Verdana"))
                    ((x-family-fonts "Sans Serif")      '(:family "Sans Serif"))
                    (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
             (base-font-color (face-foreground 'default nil 'default))
             (headline       `(:inherit default :weight normal :foreground ,base-font-color)))

        (custom-theme-set-faces
         'user
         `(org-level-8        ((t (,@headline ,@variable-tuple))))
         `(org-level-7        ((t (,@headline ,@variable-tuple))))
         `(org-level-6        ((t (,@headline ,@variable-tuple))))
         `(org-level-5        ((t (,@headline ,@variable-tuple))))
         `(org-level-4        ((t (,@headline ,@variable-tuple :height 1.1))))
         `(org-level-3        ((t (,@headline ,@variable-tuple :height 1.25))))
         `(org-level-2        ((t (,@headline ,@variable-tuple :height 1.5))))
         `(org-level-1        ((t (,@headline ,@variable-tuple :height 1.70))))
         `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
      (defun custom-org-cliplink ()
        (interactive)
        (org-cliplink-insert-transformed-title
         (org-cliplink-clipboard-content)     ;take the URL from the CLIPBOARD
         (lambda (url title)
           (let* ((parsed-url (url-generic-parse-url url)) ;parse the url
                  (clean-title
                   (cond
                    ;; if the host is github.com, cleanup the title
                    ((string= (url-host parsed-url) "github.com")
                     (replace-regexp-in-string "GitHub - .*: \\(.*\\)" "\\1" title))
                    ;; otherwise keep the original title
                    (t title))))
             ;; forward the title to the default org-cliplink transformer
             (org-cliplink-org-mode-link-transformer url clean-title)))))
    #+end_src

    #+RESULTS:
    : custom-org-cliplink

    #+END_SRC


*** links 
    - in links the usual bindings are long: C-c C-x C-n/p
    #+BEGIN_SRC elisp :tangle yes
      (add-hook 'org-load-hook
                (lambda ()
                  (define-key org-mode-map "\M-n" 'org-next-link)
                  (define-key org-mode-map "\M-p" 'org-previous-link)))
    #+end_src 

    #+RESULTS:
    | lambda | nil | (define-key org-mode-map \356 (quote org-next-link)) | (define-key org-mode-map \360 (quote org-previous-link)) |


** export
   :PROPERTIES:
   :headers-args: :tangle yes
   :END:
   [[https://endlessparentheses.com/better-time-stamps-in-org-export.html][Better time-stamps in org-export with Emacs · Endless Parentheses]]
   #+begin_src elisp :tangle yes
     (add-to-list 'org-export-filter-timestamp-functions
                  #'endless/filter-timestamp)
     (defun endless/filter-timestamp (trans back _comm)
       "Remove <> around time-stamps."
       (pcase back
         ((or `jekyll `html)
          (replace-regexp-in-string "&[lg]t;" "" trans))
         (`latex
          (replace-regexp-in-string "[<>]" "" trans))))
     #+end_src

     #+RESULTS:
     : endless/filter-timestamp

   #+begin_src elisp :tangle yes
     (setq-default org-display-custom-times t)
     ;;; Before you ask: No, removing the <> here doesn't work.
     (setq org-time-stamp-custom-formats
           '("<%d %b %Y>" . "<%d/%m/%y %a %H:%M>"))
   #+end_src

   #+RESULTS:
   : (<%d %b %Y> . <%d/%m/%y %a %H:%M>)


** functions
   #+BEGIN_SRC elisp :tangle yes
     (defun org-archive-done-tasks ()
       (interactive)
       (org-map-entries
        (lambda ()
          (org-archive-subtree)
          (setq org-map-continue-from (outline-previous-heading)))
        "/DONE" 'agenda))


     (defun custom-org-cliplink ()
       (interactive)
       (org-cliplink-insert-transformed-title
        (org-cliplink-clipboard-content)     ;take the URL from the CLIPBOARD
        (lambda (url title)
          (let* ((parsed-url (url-generic-parse-url url)) ;parse the url
                 (clean-title
                  (cond
                   ;; if the host is github.com, cleanup the title
                   ((string= (url-host parsed-url) "github.com")
                    (replace-regexp-in-string "GitHub - .*: \\(.*\\)" "\\1" title))
                   ;; otherwise keep the original title
                   (t title))))
            ;; forward the title to the default org-cliplink transformer
            (org-cliplink-org-mode-link-transformer url clean-title)))))
   #+END_SRC

   #+begin_src elisp :tangle yes
     ;; private interactive functions
     (defun occur-non-ascii ()
       "Find any non-ascii characters in the current buffer."
       (interactive)
       (occur "[^[:ascii:]]"))
     (defun find-first-non-ascii-char ()
       "Find the first non-ascii character from point onwards."
       (interactive)
       (let (point)
         (save-excursion
           (setq point
                 (catch 'non-ascii
                   (while (not (eobp))
                     (or (eq (char-charset (following-char))
                             'ascii)
                         (throw 'non-ascii (point)))
                     (forward-char 1)))))
         (if point
             (goto-char point)
           (message "No non-ascii characters."))))
     (defun toggle-maximize-buffer () "Maximize buffer" (interactive) (if (= 1 (length (window-list)))
                                                                          (jump-to-register '_)
                                                                        (progn
                                                                          (window-configuration-to-register '_)
                                                                          (delete-other-windows))))
     (defun my-expand-file-name-at-point ()
       "Use hippie-expand to expand the filename"
       (interactive)
       (let ((hippie-expand-try-functions-list
              '(try-complete-file-name-partially
                try-complete-file-name)))
         (call-interactively 'hippie-expand)))
     (global-set-key (kbd "C-M-/") 'my-expand-file-name-at-point)
     (defun org-toggle-link-display ()
       "Toggle the literal or descriptive display of links."
       (interactive)
       (if org-descriptive-links
           (progn (org-remove-from-invisibility-spec '(org-link))
                  (org-restart-font-lock)
                  (setq org-descriptive-links nil))
         (progn (add-to-invisibility-spec '(org-link))
                (org-restart-font-lock)
                (setq org-descriptive-links t))))

   #+end_src
   #+RESULTS:
   : custom-org-cliplink


*** more functions
    :properties:
    :headers-args: :tangle yes :results output
    :end:
**** TODO wrap text in an org mode block 
     [[http://pragmaticemacs.com/emacs/wrap-text-in-an-org-mode-block/][Wrap text in an org-mode block | Pragmatic Emacs]]
     #+begin_src elisp 
       (defun org-begin-template ()
         "Make a template at point."
         (interactive)
         (if (org-at-table-p)
             (call-interactively 'org-table-rotate-recalc-marks)
           (let* ((choices '(("s" . "src")
                             ("e" . "example")
                             ("q" . "quote")
                             ("v" . "verse")
                             ("c" . "center")
                             ("l" . "lAtEx")
                             ("h" . "html")
                             ("a" . "ascii")))
                  (key
                   (key-description
                    (vector
                     (read-key
                      (concat (propertize "Template type: " 'face 'minibuffer-prompt)
                              (mapconcat (lambda (choice)
                                           (concat (propertize (car choice) 'face 'font-lock-type-face)
                                                   ": "
                                                   (cdr choice)))
                                         choices
                                         ", ")))))))
             (let ((result (assoc key choices)))
               (when result
                 (let ((choice (cdr result)))
                   (cond
                    ((region-active-p)
                     (let ((start (region-beginning))
                           (end (region-end)))
                       (goto-char end)
                       (insert "#+end_" choice "\n")
                       (goto-char start)
                       (insert "#+begin_" choice "\n")))
                    (t
                     (insert "#+begin_" choice "\n")
                     (save-excursion (insert "#+end_" choice))))))))))

       ;;bind to key
       (define-key org-mode-map (kbd "C-<") 'org-begin-template)
     #+end_src

     #+RESULTS:
     : org-begin-template


** packages
   

*** org-books                                                 :broken:notang:
    :PROPERTIES:
    :headers-args: :tangle no :results output
    :END:
    - needs :: enlive - [[enlive]] 
**** setup
     https://github.com/lepisma/org-books

     #+begin_src elisp 
       (setq org-books-file "~/cloud/.personal/my-list.org")
     #+end_src
*** org-noter                                                  :melpa:notang:
    :PROPERTIES:
    :headers-args: :tangle no :results output
    :END:
   
**** basic 
     note :: mostly from [[*org-noter etc][org-noter etc]]
     #+begin_src elisp :tangle no :results silent
       (use-package org-noter
         :after org
         :ensure t)
     #+end_src


     #+begin_src elisp :tangle no :results silent
       (setq org-noter-default-notes-file-names '("~/cloud/.personal/notes/noter.org")
             org-noter-notes-search-path '("~/cloud/.personal"))
       (setq org-noter-separate-notes-from-heading t)
     #+end_src

*** org clip link                                                     :melpa:

**** basics
     https://github.com/rexim/org-cliplink
     #+begin_src elisp 
       (global-set-key (kbd "C-x p i") 'org-cliplink)
       (load-theme 'doom-nord t)
     #+end_src

    
**** custom 
     Custom Transformers You can actually customize how org-cliplink transforms and
     inserts url and title to the current buffer. To do that use
     org-cliplink-insert-transformed-title function. It takes the URL and a CALLBACK
     which is invoked when the title is retrieved.

     For example, if you want to strip off Github - <description>: from the GitHub
     titles you can implement the following custom-org-cliplink function and use it
     instead of the original org-cliplink:

     #+begin_src elisp 
       (defun custom-org-cliplink ()
         (interactive)
         (org-cliplink-insert-transformed-title
          (org-cliplink-clipboard-content)     ;take the URL from the CLIPBOARD
          (lambda (url title)
            (let* ((parsed-url (url-generic-parse-url url)) ;parse the url
                   (clean-title
                    (cond
                     ;; if the host is github.com, cleanup the title
                     ((string= (url-host parsed-url) "github.com")
                      (replace-regexp-in-string "GitHub - .*: \\(.*\\)" "\\1" title))
                     ;; otherwise keep the original title
                     (t title))))
              ;; forward the title to the default org-cliplink transformer
              (org-cliplink-org-mode-link-transformer url clean-title)))))
     #+end_src

*** toc-org                                                           :melpa:
    :PROPERTIES:
    :headers-args: :tangle yes :results output
    :END:
    #+begin_src elisp :tangle yes
      (if (require 'toc-org nil t)
          (add-hook 'org-mode-hook 'toc-org-mode)
        (warn "toc-org not found"))
    #+end_src
    [[https://github.com/snosov1/toc-org][GitHub - snosov1/toc-org: toc-org is an Emacs utility to have an up-to-date t...]] 

    After the installation, every time you’ll be saving an org file, the first
    headline with a :TOC: tag will be updated with the current table of contents.

*** TODO org-web-tools                                                :melpa:
    :PROPERTIES:
    :GH:       https://github.com/alphapapa/org-web-tools
    :headers-args: :tangle yes :results output
    :END:

**** minimal
     #+begin_src elisp
       (require 'org-web-tools)
     #+end_src
     org-web-tools--url-as-readable-org
     #+RESULTS:
     : org-web-tools

*** TODO org web
   https://github.com/DanielDe/org-web 


** capture stuff

*** links :: howardism
    - link :: [[http://www.howardism.org/Technical/Emacs/capturing-intro.html][Org Capturing Introduction]]

* ressources:
** org-clock
   add entry after done:
   https://emacs.stackexchange.com/questions/30280/how-to-conveniently-insert-a-clock-entry
   timestamps:
   https://emacs.stackexchange.com/questions/12130/how-to-insert-inactive-timestamp-via-function

** org-noter etc
   https://write.as/dani/notes-on-org-noter Org noter defines a default note
   file, where new headings are included for documents that do not have a file
   associated with them. By default this file is called Notes.org. Because I
   don't like files that start with capitals, I rename it to notes.org. Org
   noter also requires a search path (or multiple) to search for document notes
   when M-x org-noter is called from a pdf document. By default, that is
   ~/Documents, but I prefer to have it in a dedicated version controlled
   directory ~/org/Research-Notes.

** custom id
   https://writequit.org/articles/emacs-org-mode-generate-ids.html

** export -publish
 https://gohugo.io   
 ox-hugo
** other orgs
   https://ivanmalison.github.io/dotfiles/#orgprojectile

* TODO bugs

** org-preserve local variable
   <2019-06-18 Tue 20:35> 

    

   

* kitchen group
https://kitchingroup.cheme.cmu.edu/blog/2015/07/28/A-highlight-annotation-mode-for-Emacs-using-font-lock/

* NEXT refile 
  https://www.reddit.com/r/emacs/comments/4366f9/how_do_orgrefiletargets_work/
  #+begin_src elisp
(setq org-agenda-files (list "~/cloud/.personal/agenda"))
    (setq org-refile-targets (quote (("~/cloud/.personal/notes/orgmode.org" :maxlevel . 1)
                                     (nil :maxlevel . 3)
                                     (org-agenda-files :maxlevel . 3))))
    (setq org-outline-path-complete-in-steps t)         ; Refile in a single go
    (setq org-refile-use-outline-path t)                  ; Show full paths for refiling                                    ("~/cloud/.personal/agenda" :level . 2))))
  #+end_src

  #+RESULTS:
  : t


