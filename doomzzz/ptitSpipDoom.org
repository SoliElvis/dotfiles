#+SEQ_TODO: urgent(u) PROJ(p) STARTED(s)  NEXT(n) TODO(t)  MIDWAY(m) WAITING(w) SOMEDAY(h)  | DONE(d) DEFERRED(l) CANCELLED(c)
#+ATTR_ORG: :width 200/250/300/400/500/600
#+ATTR_LATEX: :width 2.0in
#+Attr_HTML: :width 200/250/300/400/500/600px
* basic
** basic basic
   
   #+BEGIN_SRC elisp :tangle yes
     (setq-default tab-width 2)
     (setq c-basic-indent 2)
     (set-frame-parameter (selected-frame) 'alpha '(100 . 90))
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
     (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
     (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
     (add-hook 'prog-mode-hook #'highlight-parentheses-mode)
     (setq dotspacemacs-highlight-delimiters 'all)
     ;;(setq org-cycle-separator-lines 2)
     (add-to-list 'load-path "~/cloud/.personal/dotfiles/emacsPackages/")
     ;;(setq persp-auto-save-fname "autosave")
   #+END_SRC

     
*** basic applications
    #+begin_src elisp
      (setq browse-url-browser-function 'browse-url-generic
            browse-url-generic-program "brave")
    #+end_src

    
*** global set keys with meta


** basic windows
   :PROPERTIES:
   :headers-args: :tangle yes :results output
   :END:
*** split and follow
    #+begin_src elisp
      (defun split-and-follow-horizontally ()
        (interactive)
        (split-window-below)
        (balance-windows)
        (other-window 1))
      (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

      (defun split-and-follow-vertically ()
        (interactive)
        (split-window-right)
        (balance-windows)
        (other-window 1))
      (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
    #+end_src

    #+RESULTS:
    : split-and-follow-vertically

** basic keybindings private quick functions
   :PROPERTIES:
   :headers-args: :tangle yes :results output
   :END:
*** org-tree-to-indirect-buffer
    https://stackoverflow.com/questions/6464738/how-can-i-switch-focus-after-buffer-split-in-emacs
    #+begin_src elisp
      (global-set-key (kbd "C-x 5 t") (lambda ()
                                        (interactive)
                                        (progn
                                          (org-tree-to-indirect-buffer)
                                          (other-window 1)
                                          (spacemacs/toggle-maximize-buffer))))
    #+end_src

    #+RESULTS:
    | lambda | nil | (interactive) | (progn (org-tree-to-indirect-buffer) (other-window 1) (spacemacs/toggle-maximize-buffer)) |

*** org-subtree-to-indirect-buffer
    #+begin_src elisp
      (defun org-subtree-to-indirect-buffer ()
        (interactive)
        (let ((ind-buf (concat (buffer-name) "-narrowclone")))
          (if (get-buffer ind-buf)
              (kill-buffer ind-buf))
          (clone-indirect-buffer-other-window ind-buf t)
          (org-narrow-to-subtree)
          (switch-to-buffer ind-buf)))
    #+end_src

    #+RESULTS:
    : org-subtree-to-indirect-buffer

*** org links
    #+begin_src elisp :tangle yes
      (global-set-key (kbd "C-c l") 'org-store-link)
      (global-set-key (kbd "C-c C-l") 'org-insert-link)
      ;; (add-hook 'pdf-view-mode #'(lambda () 
      ;; (setq pdf-tools-enable-minor-modes t
      ;; evil-evilified-state t)))

    #+end_src

    #+RESULTS:
    : org-insert-link

    



* editing-infrastructure

** heavy 
*** evil
    :PROPERTIES:
    :headers-args: :tangle yes :results output
    :END:
**** basic
     #+begin_src elisp :tangle no
       (evil-define-key 'normal org-mode-map
         (kbd "TAB") 'org-cycle
         ">" 'org-shiftmetaright
         "<" 'org-shiftmetaleft
         (kbd "C-i") 'evil-jump-forward)
       (define-key evil-normal-state-map (kbd "C-i") 'evil-jump-forward)
     #+end_src

     #+RESULTS:
     : evil-jump-forward

**** evil-surround                                                    :melpa:
     :PROPERTIES:
     :headers-args: :tangle yes :results output
     :END:
     - githubLink :: https://github.com/emacs-evil/evil-surround

     - installation :: 
                       #+begin_src elisp
                         (use-package evil-surround
                           :ensure t
                           :config
                           (global-evil-surround-mode 1))
                       #+end_src

**** example                                                       :disabled:
     #+begin_src elisp :tangle no
       (setq evil-want-keybinding nil)
       (use-package evil
         :ensure t
         :init
         (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
         (setq evil-want-keybinding nil)
         :config
         (evil-mode 1))
     #+end_src

     #+RESULTS:
     : t

**** evil collections                                              :disabled:

     #+begin_src elisp :tangle no
       (use-package evil-collection
         :after evil
         :ensure t
         :config
         (evil-collection-init))
     #+end_src

     #+RESULTS:
     : t


     #+begin_src elisp
       (evil-collection-init)   
     #+end_src

***** force evil                                                   :noTangle:
      #+begin_src elisp :tangle no
        (evil-force-normal-state)  
      #+end_src

      #+RESULTS:
    
*** neo-tree
    :PROPERTIES:
    :GH:       https://github.com/jaypei/emacs-neotree
    :END:
    #+begin_src elisp :tangle no
      (require 'neotree)
      (load-theme 'doom-city-lights)
    #+end_src

    #+RESULTS:
    : neotree-toggle
*** doom-neotree
    #+begin_src elisp :tangle no
          ;;; doom-neotree.el

      (defgroup doom-neotree nil
        "Options for doom's neotree theme"
        :group 'doom-themes)

      (defface doom-neotree-dir-face  '((t (:inherit neo-dir-link-face)))
        "Face for directory labels."
        :group 'doom-neotree)

      (defface doom-neotree-file-face '((t (:inherit neo-file-link-face)))
        "Face for file name labels."
        :group 'doom-neotree)

      ;; file type faces
      (defface doom-neotree-hidden-file-face '((t (:inherit font-lock-comment-face)))
        "Face for labels of hidden files. See `doom-neotree-file-face-re-alist'."
        :group 'doom-neotree)

      (defface doom-neotree-text-file-face '((t (:inherit neo-file-link-face)))
        "Face for labels of text/documentation files (readmes, org files, etc). See
      `doom-neotree-file-face-re-alist'."
        :group 'doom-neotree)

      (defface doom-neotree-media-file-face '((t (:inherit neo-file-link-face)))
        "Face for labels of media files. See `doom-neotree-file-face-re-alist'."
        :group 'doom-neotree)

      (defface doom-neotree-data-file-face '((t (:inherit neo-file-link-face)))
        "Face for labels of data files (json, yaml, xml, etc). See
      `doom-neotree-file-face-re-alist'."
        :group 'doom-neotree)


      ;;
      (defcustom doom-neotree-project-size 1.4
        "What :height to display the project icon at the top at."
        :type 'float
        :group 'doom-neotree)

      (defcustom doom-neotree-folder-size 1.05
        "What :height to display the folder icons at."
        :type 'float
        :group 'doom-neotree)

      (defcustom doom-neotree-chevron-size 0.8
        "What :height to display the chevron icons at."
        :type 'float
        :group 'doom-neotree)

      (defcustom doom-neotree-line-spacing 2
        "Line-spacing for neotree buffer."
        :type 'symbol
        :group 'doom-neotree)

      (define-obsolete-variable-alias 'doom-neotree-enable-file-icons 'doom-neotree-file-icons)
      (defcustom doom-neotree-file-icons 'simple
        "The style to use for the file icons. Can be nil (disabled), non-nil (for a
      diverse iconset), or 'simple, which is closest's to Atom's style as it only
      distinguishes text, source, pdfs, images and binary files."
        :type '(choice
                (const :tag "A diverse array of file icons based on file type" t)
                (const :tag "Minimalistic file icons (like Atom's)" 'simple)
                (const :tag "Disable file icons" nil))
        :group 'doom-neotree)

      (defcustom doom-neotree-enable-folder-icons t
        "If non-nil, display folder icons next to each file. Different icons are used
      depending on whether the folder is a repo, symlink or regular folder."
        :type 'boolean
        :group 'doom-neotree)

      (defcustom doom-neotree-enable-open-chevron-icons t
        "If non-nil, display the chevron-down icon next to each expanded folder."
        :type 'boolean
        :group 'doom-neotree)

      (defcustom doom-neotree-enable-closed-chevron-icons t
        "If non-nil, display the chevron-right icon next to each collapsed folder."
        :type 'boolean
        :group 'doom-neotree)

      (defcustom doom-neotree-enable-variable-pitch nil
        "If non-nil, labels will use the `doom-neotree-dir-face' and
      `doom-neotree-dir-face' faces, which inherit from the `variable-pitch' face."
        :type 'boolean
        :group 'doom-neotree)

      (defcustom doom-neotree-enable-type-colors t
        "If non-nil, color each file/folder based on the categories determined by
      `doom-neotree-file-face-re-alist'."
        :type 'boolean
        :group 'doom-neotree)

      (defcustom doom-neotree-file-face-re-alist
        '(("\\(/\\.[^$/]+\\|\\.\\(lock\\|resolved\\|o\\|pyc\\|elc\\)$\\|/\\(node_modules\\|vendor\\)[/$]\\)"
           . doom-neotree-hidden-file-face)
          ("\\(\\.\\(md\\|org\\|rst\\|log\\)\\|/[A-Z_-]+\\(\\.[a-z]+\\)?\\)$"
           . doom-neotree-text-file-face)
          ("\\.\\(png\\|jpe?g\\|gif\\|tiff\\|svg\\|bmp\\|mov\\|avi\\|mp[34]\\|webm\\|zip\\|tar\\(\\.gz\\)?\\|7z\\|rar\\)$"
           . doom-neotree-media-file-face)
          ("\\.\\([jc]son\\|\\(ya?\\|x\\|to\\)ml\\|xml\\)"
           . doom-neotree-data-file-face))
        "Regexps used to determine what category each file/folder belongs to, and what
      face to assign them."
        :type '(repeat (cons (regexp :tag "Pattern")
                             (symbol :tag "Face")))
        :group 'doom-neotree)

      (defvar doom--neotree-file-re
        `((code    . ,(concat "\\.\\(p?html?\\|xml\\|ya?ml\\|json\\|tpl\\|conf\\|erb\\|mustache\\|twig\\|ejs\\|haml\\|pug\\|jade\\)$"))
          (media   . ,(concat "\\.\\("
                              "png\\|jpe?g\\|gif\\|tiff\\|svg\\|bmp" ; images
                              "\\|mov\\|avi\\|mp[34]\\|webm"         ; media
                              "\\)$"
                              ))
          (archive . "\\.\\(zip\\|rar\\|7z\\|tar\\(\\.gz\\)?\\)$"))
        "An alist mapping file type to regular expressions, used to determine what
      type of icon to display for the file if `doom-neotree-file-icons' is set to
      `simple'.")


      ;;
      (defun doom--neotree-no-fringes ()
        "Remove fringes in neotree. They get reset each time you select the neotree
      pane and are highlighted incorrectly."
        (set-window-fringes neo-global--window 1 0))

      (defun doom--neotree-setup (&rest _)
        (setq line-spacing doom-neotree-line-spacing
              tab-width 1)
        (when (featurep 'hl-line)
          (set (make-local-variable 'hl-line-sticky-flag) t)
          (hl-line-mode +1)))

      (defun doom--neotree-folder-icon-for (dir chevron &optional faces)
        (let* ((path (expand-file-name dir))
               (chevron
                (if chevron
                    (all-the-icons-octicon
                     (format "chevron-%s" chevron)
                     :v-adjust 0.1
                     :face `(:inherit (,@faces)
                                      :family ,(all-the-icons-octicon-family)
                                      :height ,doom-neotree-chevron-size))
                  spc))
               (icon
                (when doom-neotree-enable-folder-icons
                  (all-the-icons-octicon
                   (cond ((file-symlink-p path) "file-symlink-directory")
                         ((file-exists-p (format "%s/.git" path)) "file-submodule")
                         ((all-the-icons-dir-is-submodule path) "file-submodule")
                         (t "file-directory"))
                   :v-adjust 0
                   :face `(:inherit (,@faces)
                                    :family ,(all-the-icons-octicon-family)
                                    :height ,doom-neotree-folder-size)))))
          (concat chevron "\t" icon)))

      (defun doom--neotree-file-icon-for (file-name &optional faces)
        (cond ((eq doom-neotree-file-icons 'simple)
               (if file-name
                   (propertize
                    (cond ((string-match-p (cdr (assq 'code doom--neotree-file-re)) file-name)
                           (all-the-icons-octicon "file-code"))
                          ((string-match-p (cdr (assq 'media doom--neotree-file-re)) file-name)
                           (all-the-icons-octicon "file-media"))
                          ((string-match-p (cdr (assq 'archive doom--neotree-file-re)) file-name)
                           (all-the-icons-octicon "file-zip"))
                          ((string= (or (file-name-extension file-name) "") "pdf")
                           (all-the-icons-octicon "file-pdf"))
                          ((file-symlink-p file-name)
                           (all-the-icons-octicon "file-symlink-file"))
                          ((file-executable-p file-name)
                           (all-the-icons-octicon "file-binary"))
                          (t
                           (all-the-icons-octicon "file-text")))
                    'face `(:inherit (,@faces)
                                     :family ,(all-the-icons-octicon-family)
                                     :height 1.3)
                    'display '(raise 0))
                 (all-the-icons-fileicon "default")))
              (t (all-the-icons-icon-for-file file-name))))

      (defun doom--neo-insert-fold-symbol (type file-name &optional faces)
        "Custom hybrid unicode theme with leading whitespace."
        (let ((spc "\t")
              (vspc (propertize "  " 'face 'variable-pitch)))
          (or (and (eq type 'open)
                   (insert
                    (concat spc
                            (doom--neotree-folder-icon-for
                             file-name
                             (if doom-neotree-enable-open-chevron-icons "down")
                             faces)
                            vspc)))
              (and (eq type 'close)
                   (insert
                    (concat spc
                            (doom--neotree-folder-icon-for
                             file-name
                             (if doom-neotree-enable-closed-chevron-icons "right")
                             faces)
                            vspc)))
              (and (eq type 'leaf)
                   (insert
                    (concat (when (or doom-neotree-enable-open-chevron-icons
                                      doom-neotree-enable-closed-chevron-icons)
                              spc)
                            (when doom-neotree-enable-folder-icons spc)
                            (when doom-neotree-file-icons
                              (concat spc (doom--neotree-file-icon-for file-name faces)))
                            vspc))))))

      (defun doom--neo-get-file-face (name)
        (when doom-neotree-enable-type-colors
          (let ((name (concat "/" (file-relative-name name neo-buffer--start-node)))
                case-fold-search)
            (cdr-safe
             (cl-find-if (lambda (re) (string-match-p (car re) name))
                         doom-neotree-file-face-re-alist)))))

      (defun doom--neo-buffer--insert-root-entry (node)
        "Pretty-print pwd in neotree"
        (let ((project-name (file-name-nondirectory (substring node 0 (1- (length node)))))
              (faces '(neo-root-dir-face)))
          (when doom-neotree-enable-variable-pitch
            (push 'variable-pitch faces))
          (if (display-graphic-p)
              (insert
               (concat (propertize " " 'face `(:inherit (,@faces)))
                       (all-the-icons-octicon "repo"
                                              :height doom-neotree-project-size
                                              :face 'neo-root-dir-face
                                              :v-adjust -0.1)
                       (propertize " " 'face 'neo-root-dir-face))))
          (insert (propertize (concat project-name "\n") 'face `(:inherit (,@faces))))))

      (defun doom--neo-buffer--insert-dir-entry (node depth expanded)
        (let ((node-short-name (neo-path--file-short-name node))
              (faces '(doom-neotree-dir-face))
              (add-face (doom--neo-get-file-face node)))
          (insert-char ?\s (* (- depth 1) 2)) ; indent
          ;; (when (memq 'char neo-vc-integration)
          ;;   (insert-char ?\s 2))
          (when add-face (setq faces (list add-face)))
          ;; (when (memq 'face neo-vc-integration)
          ;;   (push (cdr vc) faces))
          (if (display-graphic-p)
              (doom--neo-insert-fold-symbol (if expanded 'open 'close) node faces)
            (neo-buffer--insert-fold-symbol (if expanded 'open 'close) node))
          (when doom-neotree-enable-variable-pitch
            (push 'variable-pitch faces))
          ;;
          (insert-button node-short-name
                         'follow-link t
                         'face `(:inherit (,@faces))
                         'neo-full-path node
                         'keymap neotree-dir-button-keymap)
          (neo-buffer--node-list-set nil node)
          (neo-buffer--newline-and-begin)))

      (defun doom--neo-buffer--insert-file-entry (node depth)
        (let ((node-short-name (neo-path--file-short-name node))
              ;; (vc (when neo-vc-integration (neo-vc-for-node node)))
              (faces '(doom-neotree-file-face))
              (add-face (doom--neo-get-file-face node)))
          (insert-char ?\s (* (- depth 1) 2)) ; indent
          ;; (when (memq 'char neo-vc-integration)
          ;;   (insert-char (car vc))
          ;;   (insert-char ?\s))
          (when add-face (setq faces (list add-face)))
          ;; (when (memq 'face neo-vc-integration)
          ;;   (push (cdr vc) faces))
          (if (display-graphic-p)
              (doom--neo-insert-fold-symbol 'leaf node faces)
            (neo-buffer--insert-fold-symbol 'leaf node))
          (when doom-neotree-enable-variable-pitch
            (push 'variable-pitch faces))
          ;;
          (insert-button node-short-name
                         'follow-link t
                         'face `(:inherit (,@faces))
                         'neo-full-path node
                         'keymap neotree-file-button-keymap)
          (neo-buffer--node-list-set nil node)
          (neo-buffer--newline-and-begin)))


      ;;
      (eval-after-load "neotree"
        (lambda ()
          (unless (require 'all-the-icons nil t)
            (error "all-the-icons isn't installed"))

          ;; Enable buffer-local hl-line and adjust line-spacing
          (add-hook 'neo-after-create-hook #'doom--neotree-setup)
          ;; Incompatible
          (setq neo-vc-integration nil)
          ;; Remove fringes in Neotree pane
          (advice-add #'neo-global--select-window :after #'doom--neotree-no-fringes)
          ;; Patch neotree to use `doom--neo-insert-fold-symbol'
          (advice-add #'neo-buffer--insert-file-entry :override #'doom--neo-buffer--insert-file-entry)
          (advice-add #'neo-buffer--insert-dir-entry  :override #'doom--neo-buffer--insert-dir-entry)
          ;; Shorter pwd in neotree
          (advice-add #'neo-buffer--insert-root-entry :override #'doom--neo-buffer--insert-root-entry)))

      (provide 'doom-neotree)
      ;;; doom-neotree.el ends here
    #+end_src

    #+RESULTS:
    : doom-neotree

*** swiper/ivy
    -   http://develop.spacemacs.org/layers/+completion/ivy/README.html
    -   https://github.com/abo-abo/swiper

**** small config example from github
     #+begin_src elisp :tangle yes 
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       ;; enable this if you want `swiper' to use it
       ;; (setq search-default-mode #'char-fold-to-regexp)
       (global-set-key "\C-s" 'swiper)
       (global-set-key (kbd "C-c C-r") 'ivy-resume)
       (global-set-key (kbd "<f6>") 'ivy-resume)
       (global-set-key (kbd "C-x C-f") 'counsel-find-file)
       (global-set-key (kbd "<f1> f") 'counsel-describe-function)
       (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
       (global-set-key (kbd "<f1> l") 'counsel-find-library)
       (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
       (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
       (global-set-key (kbd "C-c g") 'counsel-git)
       (global-set-key (kbd "C-c j") 'counsel-git-grep)
       (global-set-key (kbd "C-c k") 'counsel-ag)
       (global-set-key (kbd "C-x l") 'counsel-locate)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

     #+end_src

     #+RESULTS:
     : counsel-minibuffer-history

*** modeline 
**** doomline
     - link :: https://github.com/seagle0128/doom-modeline
     #+BEGIN_SRC elisp :tangle yes
       (require 'doom-modeline)
       (doom-modeline-mode 1)
     #+end_src
     #+begin_src elisp :tangle yes
       (use-package doom-modeline
         :ensure t
         :hook (after-init . doom-modeline-mode))
     #+end_src

     #+RESULTS:
     | x-wm-set-size-hint | doom-modeline-mode | table--make-cell-map |
***** customize
      #+begin_src elisp :tangle yes
        ;; How tall the mode-line should be. It's only respected in GUI.
        ;; If the actual char height is larger, it respects the actual height.
        (setq doom-modeline-height 25)

        ;; How wide the mode-line bar should be. It's only respected in GUI.
        (setq doom-modeline-bar-width 3)
        (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
        (setq doom-modeline-icon t)
        (setq doom-modeline-major-mode-icon t)
        (setq doom-modeline-major-mode-color-icon t)
        (setq doom-modeline-buffer-state-icon t)
        (setq doom-modeline-buffer-modification-icon t)
        (setq doom-modeline-minor-modes nil)
        (setq doom-modeline-enable-word-count nil)
        (setq doom-modeline-buffer-encoding t)
        (setq doom-modeline-indent-info nil)
        (setq doom-modeline-checker-simple-format t)
        (setq doom-modeline-vcs-max-length 12)
        (setq doom-modeline-persp-name t)
        (setq doom-modeline-lsp t)
        (setq doom-modeline-github nil)
        (setq doom-modeline-github-interval (* 30 60))
        (setq doom-modeline-env-version t)
        (setq doom-modeline-env-enable-python t)
        (setq doom-modeline-env-enable-ruby t)
        (setq doom-modeline-env-enable-perl t)
        (setq doom-modeline-env-enable-go t)
        (setq doom-modeline-env-enable-elixir t)
        (setq doom-modeline-env-enable-rust t)

        ;; Change the executables to use for the language version string
        (setq doom-modeline-env-python-executable "python")
        (setq doom-modeline-env-ruby-executable "ruby")
        (setq doom-modeline-env-perl-executable "perl")
        (setq doom-modeline-env-go-executable "go")
        (setq doom-modeline-env-elixir-executable "iex")
        (setq doom-modeline-env-rust-executable "rustc")
        (setq doom-modeline-mu4e t)
        (setq doom-modeline-irc t)
        (setq doom-modeline-irc-stylize 'identity)
      #+end_src

** spacemacs stuff

*** Hybrid
    The hybrid editing style is like the Vim style except that =insert state= is
    replaced by a new state called =hybrid state=. In =hybrid state= all the Emacs
    key bindings are available; this is like replacing the =insert state= with the
    =emacs state= but provides an isolated key map =evil-hybrid-state-map=.

    To bind keys in Hybrid editing style (=hybrid state=):

    #+BEGIN_SRC emacs-lisp
      (define-key evil-hybrid-state-map (kbd "C-]") 'forward-char)
    #+END_SRC

    This style can be tweaked to be more like Emacs or more like Vim depending
    on the user preferences. The following variables are available to change the
    style configuration:

    - =hybrid-mode-default-state= The default state when opening a new buffer,
      default is =normal=. Set it to =emacs= for a more emacsy style.
    - =hybrid-mode-enable-hjkl-bindings= If non nil then packages will configure
      =h j k l= key bindings for navigation.
    - =hybrid-mode-enable-evilified-state= If non nil buffer are =evilified= when
      supported, if nil then =emacs= state is enabled in those buffers instead.

    Default configuration is:

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default dotspacemacs-editing-style '(hybrid :variables
                                                        hybrid-mode-enable-evilified-state t
                                                        hybrid-mode-enable-hjkl-bindings t
                                                        hybrid-mode-default-state 'normal))
    #+END_SRC

    #+RESULTS:
    | hybrid | :variables | hybrid-mode-enable-evilified-state | t | hybrid-mode-enable-hjkl-bindings | t | hybrid-mode-default-state | (quote normal) |

    To toggle the hybrid style on and off use ~SPC t E h~ and ~M-m t E h~. When
    off the =vim= style is enabled.

** buffer stuff
   #+BEGIN_SRC elisp :tangle yes
     (global-set-key (kbd "C-x C-b") 'ibuffer)
     (autoload 'ibuffer "ibuffer" "List buffers." t)
   #+END_SRC

*** helm                                                              :melpa:
    :PROPERTIES:
    :headers-args: :tangle yes :results output
    :END:
    #+begin_src elisp
      (define-key helm-find-files-map "\t" 'helm-execute-persistent-action)
    #+end_src

    #+RESULTS:
    : helm-execute-persistent-action

** tramp stuff
   #+BEGIN_SRC emacs-lisp
     (setq tramp-default-method "ssh")
     ;; (custom-set-variables
     ;;  '(tramp-default-method "ssh")
     ;;  '(tramp-default-user "fredoboileau")
     ;;  '(tramp-default-host "192.168.50.137"))

     (define-key global-map (kbd "C-c s") 'helm-tramp)
     (setq make-backup-files nil)
     (setq create-lockfiles nil)
     (add-hook 'helm-tramp-pre-command-hook '(lambda () (global-aggressive-indent-mode 0)
                                               (projectile-mode 0)
                                               (editorconfig-mode 0)))
     (add-hook 'helm-tramp-quit-hook '(lambda () (global-aggressive-indent-mode 1)
                                        (projectile-mode 1)
                                        (editorconfig-mode 1)))
     (setq helm-tramp-custom-connections '(/ssh:domain|sudo:user@localhost:/))
   #+END_SRC

** media stuff
*** pdf
    :properties:
    requires :: [[*openwith][openwith]]
    :end:
    #+begin_src elisp :tangle no :results silent
      (require 'openwith)
      (openwith-mode t)
      (setq openwith-associations '(("\\.pdf\\'" "evince" (file))))
    #+end_src


** magithub
   :PROPERTIES:
   :GH:       https://github.com/vermiculus/magithub
   :headers-args: :tangle yes :results output
   :END:
   https://github.com/vermiculus/magithub/blob/master/magithub.org  
*** quickstart
    #+begin_src elisp
      (use-package magithub
        :after magit
        :config
        (magithub-feature-autoinject t)
        (setq magithub-clone-default-directory "~/github"))
    #+end_src

    #+RESULTS:
    : t
    

* candy 
  :PROPERTIES:
  :headers-args: :tangle no
  :END:

** emacs-dashboard                                                   :broken:
   :PROPERTIES:
   :GH:       https://github.com/emacs-dashboard/emacs-dashboard
   :headers-args: :tangle no
   :END:
*** little config from github
    #+begin_src elisp
      (require 'dashboard)
      (dashboard-setup-startup-hook)
      ;; Or if you use use-package
      (use-package dashboard
        :ensure t
        :config
        (dashboard-setup-startup-hook))
    #+end_src
*** daemon stuff
    #+begin_src elisp
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    #+end_src

** STARTED makes images smaller 
   :PROPERTIES:
   :stackexchange: https://emacs.stackexchange.com/questions/26363/downscaling-inline-images-in-org-mode
   :headers-args: :tangle no
   :END:
   :LOGBOOK:
   :END:

   #+begin_src elisp
     (setq org-image-actual-width nil)
   #+end_src

   #+begin_example org
   #+NAME: fig:figure name
   #+CAPTION: figure name
   #+ATTR_ORG: :width 200/250/300/400/500/600
   #+ATTR_LATEX: :width 2.0in
   #+ATTR_HTML: :width 200/250/300/400/500/600px
   [[file:./file.png]]
   #+end_example



* misc packages 

** hea

** perspectives 
   :PROPERTIES:
   :GH:       https://github.com/nex3/perspective-el
   :headers-args: :tangle yes :results output
   :END:
   #+begin_src  elisp 
     (require 'perspective)
   #+end_src

   #+RESULTS:
   : perspective

   s -- persp-switch: Query a perspective to switch or create
   k -- persp-remove-buffer: Query a buffer to remove from current perspective
   c -- persp-kill : Query a perspective to kill
   r -- persp-rename: Rename current perspective
   a -- persp-add-buffer: Query an open buffer to add to current perspective
   A -- persp-set-buffer: Add buffer to current perspective and remove it from all others
   i -- persp-import: Import a given perspective from another frame.
   n, <right> -- persp-next : Switch to next perspective
   p, <left> -- persp-prev: Switch to previous perspective
   #+RESULTS:
   : perspective


** org-protocol-github-lines
   :PROPERTIES:
   :GH:       https://github.com/kidd/org-protocol-github-lines
   :END:
** fzf
   :PROPERTIES:
   :GH:       https://github.com/bling/fzf.el
   :END:

** wget
   [[https://github.com/ataka/emacs-wget/blob/master/USAGE.md][emacs-wget/USAGE.md at master · ataka/emacs-wget · GitHub]]

** TODO youtube capture

*** youtube preview images (inline stuff)
    :PROPERTIES:
    :headers-args: :tangle no
    :END:
    https://emacs.stackexchange.com/questions/38098/org-mode-custom-youtube-link-syntax
    #+begin_src elisp 
      (require 'org)
      (require 'org-element)

      (defcustom org-yt-url-protocol "yt"
        "Protocol identifier for youtube links."
        :group 'org-yt
        :type 'string)

      (defun org-yt-follow (video-id)
        "Open youtube with VIDEO-ID."
        (browse-url (concat "https://youtu.be/" video-id)))

      (org-link-set-parameters org-yt-url-protocol :follow #'org-yt-follow)

      (defun org-image-update-overlay (file link &optional data-p refresh)
        "Create image overlay for FILE associtated with org-element LINK.
              If DATA-P is non-nil FILE is not a file name but a string with the image data.
              See also `create-image'.
              This function is almost a duplicate of a part of `org-display-inline-images'."
        (when (or data-p (file-exists-p file))
          (let ((width
                 ;; Apply `org-image-actual-width' specifications.
                 (cond
                  ((not (image-type-available-p 'imagemagick)) nil)
                  ((eq org-image-actual-width t) nil)
                  ((listp org-image-actual-width)
                   (or
                    ;; First try to find a width among
                    ;; attributes associated to the paragraph
                    ;; containing link.
                    (let ((paragraph
                           (let ((e link))
                             (while (and (setq e (org-element-property
                                                  :parent e))
                                         (not (eq (org-element-type e)
                                                  'paragraph))))
                             e)))
                      (when paragraph
                        (save-excursion
                          (goto-char (org-element-property :begin paragraph))
                          (when
                              (re-search-forward
                               "^[ \t]*#\\+attr_.*?: +.*?:width +\\(\\S-+\\)"
                               (org-element-property
                                :post-affiliated paragraph)
                               t)
                            (string-to-number (match-string 1))))))
                    ;; Otherwise, fall-back to provided number.
                    (car org-image-actual-width)))
                  ((numberp org-image-actual-width)
                   org-image-actual-width)))
                (old (get-char-property-and-overlay
                      (org-element-property :begin link)
                      'org-image-overlay)))
            (if (and (car-safe old) refresh)
                (image-refresh (overlay-get (cdr old) 'display))
              (let ((image (create-image file
                                         (and width 'imagemagick)
                                         data-p
                                         :width width)))
                (when image
                  (let* ((link
                          ;; If inline image is the description
                          ;; of another link, be sure to
                          ;; consider the latter as the one to
                          ;; apply the overlay on.
                          (let ((parent
                                 (org-element-property :parent link)))
                            (if (eq (org-element-type parent) 'link)
                                parent
                              link)))
                         (ov (make-overlay
                              (org-element-property :begin link)
                              (progn
                                (goto-char
                                 (org-element-property :end link))
                                (skip-chars-backward " \t")
                                (point)))))
                    (overlay-put ov 'display image)
                    (overlay-put ov 'face 'default)
                    (overlay-put ov 'org-image-overlay t)
                    (overlay-put
                     ov 'modification-hooks
                     (list 'org-display-inline-remove-overlay))
                    (push ov org-inline-image-overlays))))))))

      (defun org-yt-get-image (url)
        "Retrieve image from url."
        (let ((image-buf (url-retrieve-synchronously url)))
          (when image-buf
            (with-current-buffer image-buf
              (goto-char (point-min))
              (when (looking-at "HTTP/")
                (delete-region (point-min)
                               (progn (re-search-forward "\n[\n]+")
                                      (point))))
              (setq image-data (buffer-substring-no-properties (point-min) (point-max)))))))

      (defconst org-yt-video-id-regexp "[-_[:alnum:]]\\{10\\}[AEIMQUYcgkosw048]"
        "Regexp matching youtube video id's taken from `https://webapps.stackexchange.com/questions/54443/format-for-id-of-youtube-video'.")

      (defun org-yt-display-inline-images (&optional include-linked refresh beg end)
        "Like `org-display-inline-images' but for yt-links."
        (when (display-graphic-p)
          (org-with-wide-buffer
           (goto-char (or beg (point-min)))
           (let ((re (format "\\[\\[%s:\\(%s\\)\\]\\]" org-yt-url-protocol org-yt-video-id-regexp)))
             (while (re-search-forward re end t)
               (let ((video-id (match-string 1))
                     (el (save-excursion (goto-char (match-beginning 1)) (org-element-context)))
                     image-data)
                 (when el
                   (setq image-data 
                         (or (let ((old (get-char-property-and-overlay
                                         (org-element-property :begin el)
                                         'org-image-overlay)))
                               (and old
                                    (car-safe old)
                                    (overlay-get (cdr old) 'display)))
                             (org-yt-get-image (format "http://img.youtube.com/vi/%s/0.jpg" video-id))))
                   (when image-data
                     (org-image-update-overlay image-data el t t)))))))))

      (advice-add #'org-display-inline-images :after #'org-yt-display-inline-images)  
    #+end_src
    #+results:
    - to show or not previews (which are too big right now ) :
    #+begin_src elisp 
      (org-toggle-inline-images)
    #+end_src
    #+begin_images
    #+ATTR_ORG: :width 200/250/300/400/500/600
    [[yt:W6e1TctNyw8]]
    #+ATTR_ORG: :width 200/250/300/400/500/600
    [[yt:aiw8CTK2o_Q]]

    #+ATTR_ORG: :width 200/250/300/400/500/600
    [[yt:j_t8CdCpFXA]]
    #+end_images
    
*** make better capture

** pdf stuff
   [[https://www.emacswiki.org/emacs/pdf-tools-extension.el][EmacsWiki: pdf-tools-extension.el]]
   #+begin_src elisp :tangle no
     (require 'pdf-tools-extension) 
   #+end_src

   #+RESULTS:
   : pdf-tools-extension

   
*** pdf-tools
    [[https://github.com/politza/pdf-tools][GitHub - politza/pdf-tools: Emacs support library for PDF files.]]
    
** NEXT org-protocol

** TODO org-download
   https://github.com/abo-abo/org-download

** git-link                                                           :melpa:

** browse-at-remote                                               :melpa:meh:
   [[https://github.com/rmuslimov/browse-at-remote][GitHub - rmuslimov/browse-at-remote: Browse target page on github/bitbucket f...]]

** SOMEDAY enlive                                                     :melpa:
   https://github.com/zweifisch/enlive

** SOMEDAY openwith                                                   :melpa:

   
* projects/window/buffer management
** layouts
http://spacemacs.org/doc/DOCUMENTATION.html#layouts-and-workspaces
** basic local
  :PROPERTIES:
  :headers-args: :tangle yes :results output
  :END:
  #+begin_src elisp :tangle no
    (load-file "~/cloud/.personal/dotfiles/emacsPackages/persp-mode/persp-mode.el") 
    (setq persp-autokill-buffer-on-remove 'kill-weak)
  #+end_src

  #+RESULTS:
  : kill-weak

   :PROPERTIES:
   :headers-args: :tangle no
   :END:
   #+begin_src elisp
     ;; Integrate `ivy'
     (with-eval-after-load "ivy"
       (add-hook 'ivy-ignore-buffers
                 #'(lambda (b)
                     (when persp-mode
                       (let ((persp (get-current-persp)))
                         (if persp
                             (not (persp-contain-buffer-p b persp))
                           nil)))))

       (setq ivy-sort-functions-alist
             (append ivy-sort-functions-alist
                     '((persp-kill-buffer   . nil)
                       (persp-remove-buffer . nil)
                       (persp-add-buffer    . nil)
                       (persp-switch        . nil)
                       (persp-window-switch . nil)
                       (persp-frame-switch  . nil)))))
   #+end_src

   #+RESULTS:
   : ((read-file-name-internal . ivy-sort-file-function-default) (internal-complete-buffer) (ivy-completion-in-region) (counsel-git-grep-function) (Man-goto-section) (org-refile) (t . ivy-string<) (persp-kill-buffer) (persp-remove-buffer) (persp-add-buffer) (persp-switch) (persp-window-switch) (persp-frame-switch))


** WAITING old windows and projects etc                              :broken:
  
*** projectile perspective and persp mode                          :noTangle:
    :PROPERTIES:
    :headers-args: :tangle no
    :END:
    https://github.com/bbatsov/projectile
    #+begin_src elisp 
      (load-theme 'doom-nord t)
      (require 'projectile)
      ;;     (require 'perspective)
      (require 'persp-mode)
      (define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map)
      ;;(with-eval-after-load "persp-mode-autoloads"
      ;;  (setq persp-autokill-buffer-on-remove 'kill-weak)
      ;;  (add-hook 'after-init-hook #'(lambda () (persp-mode 1))))
      (load-theme 'doom-city-lights t)
      #+end_src


    #+RESULTS:
    : t

    #+begin_src elisp

    #+end_src

    #+RESULTS:
    : t

*** new candidate
    :PROPERTIES:
    :headers-args: :tangle yes :results output
    :END:
    #+begin_src elisp
      (use-package persp-mode
        :no-require t
        :demand t
        :init
        (progn
          (persp-mode t))
        :config
        (progn
          (use-package persp-mode-projectile-bridge
            :ensure t
            :config
            (progn
              (with-eval-after-load "persp-mode-projectile-bridge-autoloads"
                (add-hook 'persp-mode-projectile-bridge-mode-hook
                          #'(lambda ()
                              (if persp-mode-projectile-bridge-mode
                                  (persp-mode-projectile-bridge-find-perspectives-for-all-buffers)
                                (persp-mode-projectile-bridge-kill-perspectives))))
                (add-hook 'after-init-hook
                          #'(lambda ()
                              (persp-mode-projectile-bridge-mode 1))
                          t))))))
    #+end_src

    #+RESULTS:
    : t

*** windows                                   :melpa:WAITING:github:notangle:
    https://github.com/bmag/emacs-purpose

*** persp mode fix                                                   :broken:
    :PROPERTIES:
    :headers-args: :tangle yes :results output
    :END:
    [[https://github.com/seagle0128/.emacs.d/commit/4b87e7cf00d0a343ed75928d18aee59cd81b6465][Fix: Unable to create/handle persp-mode. · seagle0128/.emacs.d@4b87e7c · GitHub]]
**** basic init : persp-add-new redefined at init time and prefix map
     :PROPERTIES:
     :headers-args: :tangle no
     :END:

 #+begin_src elisp
   ;; Windows/buffers sets shared among frames + save/load.
   (use-package persp-mode
     :diminish
     :defines ivy-sort-functions-alist
     :commands (get-current-persp persp-contain-buffer-p)
     :init
     (setq persp-keymap-prefix (kbd "C-x p"))
     (setq persp-nil-name "main")
     :config
     (defun* persp-add-new (name &optional (phash *persp-hash*))
       "Create a new perspective with the given `NAME'. Add it to `PHASH'.
     Return the created perspective."
       (interactive "sA name for the new perspective: ")
       (if (and name (not (equal "" name)))
           (destructuring-bind (e . p)
               (persp-by-name-and-exists name phash)
             (if e p
               (setq p (if (equal persp-nil-name name)
                           nil (make-persp :name name)))
               (persp-add p phash)
               (run-hook-with-args 'persp-created-functions p phash)
               p))
         (message "[persp-mode] Error: Can't create a perspective with empty name.")
         nil)))
 #+end_src

 #+RESULTS:
 : t

*** persp modeline 
    :PROPERTIES:
    :headers-args: :tangle no
    :END:

    #+begin_src elisp 
      ;; Display on mode-line
      (add-to-list 'global-mode-string
                   '(:eval
                     (format
                      (propertize
                       " #%s "
                       'face (let ((persp (get-current-persp)))
                               (if persp
                                   (if (persp-contain-buffer-p (current-buffer) persp)
                                       'persp-face-lighter-default
                                     'persp-face-lighter-buffer-not-in-persp)
                                 'persp-face-lighter-nil-persp)))
                      (safe-persp-name (get-current-persp)))))
    #+end_src

***** persp highlighter
      :PROPERTIES:
      :headers-args: :tangle no
      :END:
      #+begin_src elisp
        (defface persp-face-lighter-buffer-not-in-persp
          '((default . (:background "#F00" :foreground "#00F" :weight bold)))
          "Face for the lighter when the current buffer is not in a perspective."
          :group 'persp-mode)
        (defface persp-face-lighter-nil-persp
          '((t :inherit bold-italic))
          "Face for the lighter when the current perspective is nil."
          :group 'persp-mode)
        (defface persp-face-lighter-default
          '((t :inherit italic))
          "Default face for the lighter.")

        (defcustom persp-lighter
          '(:eval
            (format
             (propertize
              " #%.5s"
              'face (let ((persp (get-current-persp)))
                      (if persp
                          (if (persp-contain-buffer-p (current-buffer) persp)
                              'persp-face-lighter-default
                            'persp-face-lighter-buffer-not-in-persp)
                        'persp-face-lighter-nil-persp)))
             (safe-persp-name (get-current-persp))))
          "Defines how the persp-mode show itself in the modeline."
          :group 'persp-mode
          :type 'sexp)

        (define-minor-mode my-persp-mode-lighter
          :require    'persp-mode
          :global     t
          :lighter    (:eval persp-lighter))
      #+end_src
      #+RESULTS:

*** ivy
    :PROPERTIES:
    :headers-args: :tangle no
    :END:
    #+begin_src elisp
      ;; Integrate `ivy'
      (with-eval-after-load "ivy"
        (add-hook 'ivy-ignore-buffers
                  #'(lambda (b)
                      (when persp-mode
                        (let ((persp (get-current-persp)))
                          (if persp
                              (not (persp-contain-buffer-p b persp))
                            nil)))))

        (setq ivy-sort-functions-alist
              (append ivy-sort-functions-alist
                      '((persp-kill-buffer   . nil)
                        (persp-remove-buffer . nil)
                        (persp-add-buffer    . nil)
                        (persp-switch        . nil)
                        (persp-window-switch . nil)
                        (persp-frame-switch  . nil)))))
    #+end_src

*** projectile bridge 
    :PROPERTIES:
    :headers-args: :tangle no
    :END:

    #+begin_src elisp
      (use-package persp-mode-projectile-bridge
        :after projectile persp-mode
        :commands (persp-mode-projectile-bridge-find-perspectives-for-all-buffers
                   persp-mode-projectile-bridge-kill-perspectives)
        :hook ((persp-mode . persp-mode-projectile-bridge-mode)
               (persp-mode-projectile-bridge-mode
                . (lambda ()
                    (if persp-mode-projectile-bridge-mode
                        (persp-mode-projectile-bridge-find-perspectives-for-all-buffers)
                      (persp-mode-projectile-bridge-kill-perspectives))))))
    #+end_src

    #+RESULTS:
    : init-persp


* meta-funky
** capture
** snippets
   #+begin_src elisp :tangle yes
     (require 'org-tempo)
     (use-package yasnippet
       :diminish (yas-minor-mode)
       :init
       (yas-global-mode 1))
   #+end_src
  


* questions:
  - require vs open with



* ressources
https://joshrollinswrites.com/emacsorg/org-capture-template-2/
** configs
   [[http://thume.ca/howto/2015/03/07/configuring-spacemacs-a-tutorial/][Configuring Spacemacs: A Tutorial - Tristan Hume]] 


* from scratch:
1. multiserver for testing
2. https://github.com/raxod502/straight.el
3. usepackage?
