#+TITLE: DooDoo
#+AUTHOR: Frederic Boileau

* basic
:PROPERTIES:
:header-args: :tangle yes
:END:

** preamble
#+BEGIN_SRC elisp
;;; package --- doodoo
;;; Commentary:
;;; summary: private config of Doom
;;; Code:
#+END_SRC


** basic basic

#+BEGIN_SRC elisp
;; Set default font
(set-face-attribute 'default nil
                    :family "Inconsolata"
                    :height 110
                    :weight 'normal
                    :width 'normal)
(setq  inferior-julia-program-name "/usr/bin/julia")
(setq python-python-command "/usr/bin/ipython")
(ranger-override-dired-mode t)
(setq org-cycle-separator-lines 2)
(require 'doom-themes)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled
(doom-themes-org-config)
(setq-default tab-width 2)
(setq c-basic-indent 2)
(set-frame-parameter (selected-frame) 'alpha '(100 . 90))
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)
(setq org-cycle-separator-lines 2)
(bind-key (kbd "M-y") 'helm-show-kill-ring)
(bind-key (kbd "M-o") 'company-complete)
(global-set-key (kbd "M-p") nil)
(bind-key (kbd "M-p l") 'org-cliplink)
(load-theme 'doom-city-lights)
#+END_SRC



** emacs xdg
#+begin_src elisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "brave")
#+end_src

#+RESULTS:
: brave


** searching

*** swiper/ivy :melpa:github:
:PROPERTIES:
:GH:       https://github.com/abo-abo/swiper
:END:

**** small config example from github
#+begin_src elisp :tangle yes :results replace
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
;; enable this if you want `swiper' to use it
;; (setq search-default-mode #'char-fold-to-regexp)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c f") 'counsel-fzf)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
#+end_src

#+RESULTS:
: counsel-locate

- http://develop.spacemacs.org/layers/+completion/ivy/README.html


*** rg :melpa:github:broken:
:PROPERTIES:
:GH:       https://github.com/dajva/rg.el
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(use-package rg
  :bind ("C-c l" . counsel-rg)
  :config
  (rg-enable-default-bindings))
#+END_SRC

#+RESULTS:
: counsel-rg


** doom modeline :melpa:github:doom:
:PROPERTIES:
:header-args: :tangle yes
:GH:       https://github.com/abo-abo/swiper
:END:
#+BEGIN_SRC elisp
(require 'doom-modeline)
(doom-modeline-mode 1)
#+end_src

*** customize
#+begin_src elisp
(setq doom-modeline-height 25)
(setq doom-modeline-bar-width 3)
(setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
(setq doom-modeline-icon t)
(setq doom-modeline-major-mode-icon t)
(setq doom-modeline-major-mode-color-icon t)
(setq doom-modeline-persp-name t)
(setq doom-modeline-buffer-state-icon t)
(setq doom-modeline-buffer-modification-icon t)
(setq doom-modeline-minor-modes nil)
(setq doom-modeline-enable-word-count nil)
(setq doom-modeline-buffer-encoding t)
(setq doom-modeline-indent-info nil)
(setq doom-modeline-checker-simple-format t)
(setq doom-modeline-vcs-max-length 12)
(setq doom-modeline-persp-name t)
(setq doom-modeline-lsp t)
(setq doom-modeline-github nil)
(setq doom-modeline-github-interval (* 30 60))
(setq doom-modeline-env-version t)
(setq doom-modeline-env-enable-python t)
(setq doom-modeline-env-enable-ruby t)
(setq doom-modeline-env-enable-perl t)
(setq doom-modeline-env-enable-go t)
(setq doom-modeline-env-enable-elixir t)
(setq doom-modeline-env-enable-rust t)

;; Change the executables to use for the language version string
(setq doom-modeline-env-python-executable "python")
(setq doom-modeline-env-ruby-executable "ruby")
(setq doom-modeline-env-perl-executable "perl")
(setq doom-modeline-env-go-executable "go")
(setq doom-modeline-env-elixir-executable "iex")
(setq doom-modeline-env-rust-executable "rustc")
(setq doom-modeline-mu4e t)
(setq doom-modeline-irc t)
(setq doom-modeline-irc-stylize 'identity)
#+end_src

#+RESULTS:
: identity


** babel
:PROPERTIES:
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(require 'ob-shell)
(require 'org-tempo)
(setq tempo-interactive t)
(require 'ox-md)
(require 'julia-repl)
(add-hook 'julia-mode-hook 'julia-repl-mode)
(with-eval-after-load "ob"
  (require 'org-babel-eval-in-repl))

#+END_SRC

#+RESULTS:
: org-babel-eval-in-repl

#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (julia . t)
   (shell . t)))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC elisp
(tempo-define-template "my-property"
                       '(":PROPERTIES:" p ":END:" >)
                       "<p"
                       "Insert a property tempate")
(tempo-define-template "name"
                       '("#+NAME:" (p "Name : " name)  n)
                       "<n"
                       "Insert name")
#+END_SRC

#+RESULTS:
: tempo-template-name




** org faces
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC elisp
(use-package org-faces
  :after org
  :custom
  (org-todo-keyword-faces
   '(("DONE" . (:foreground "cyan" :weight bold))
     ("SOMEDAY" . (:foreground "gray" :weight bold))
     ("WAITING" . (:foreground "red" :weight bold))
     ("STARTED" . (:foreground "cyan" :weight normal))
     ("NEXT" . (:foreground "cyan" :weight bold)))))
#+END_SRC

#+RESULTS:
: org-faces


  Install Source Sans Pro."))))
       (base-font-color (face-foreground 'default nil 'default))
       (headline       `(:inherit default :weight normal :foreground ,base-font-color)))

  (custom-theme-set-faces
   'user
   `(org-level-8        ((t (,@headline ,@variable-tuple))))
   `(org-level-7        ((t (,@headline ,@variable-tuple))))
   `(org-level-6        ((t (,@headline ,@variable-tuple))))
   `(org-level-5        ((t (,@headline ,@variable-tuple))))
   `(org-level-4        ((t (,@headline ,@variable-tuple :height 1.2))))
   `(org-level-3        ((t (,@headline ,@variable-tuple :height 1.25))))
   `(org-level-2        ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-level-1        ((t (,@headline ,@variable-tuple :height 1.70))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
#+END_SRC

#+RESULTS:


** bib stuff

#+BEGIN_SRC elisp
(setq reftex-default-bibliography '("~/.personal/.bibstuff/master-biblio.bib"))

(setq org-ref-bibliography-notes "~/.personal/.bibstuff/orgRefNotes.org"
      org-ref-default-bibliography '("~/.personal/.bibstuff/master-bib.bib")
      org-ref-pdf-directory "~/.personal/zotero/storage/")

(setq bibtex-completion-bibliography '("~/.personal/.bibstuff/master-bib.bib")
      bibtex-completion-library-path "~/.personal/zotero/storage"
      bibtex-completion-notes-path "~/.personal/.bibstuff/helm-bibtex-notes")

(setq bibtex-completion-pdf-field "file")
(setq bibtex-completion-pdf-open-function
      (lambda (fpath)
        (start-process "evince" "*helm-bibtex-evince*" "/usr/bin/evince"
                       fpath)))

(setq bibtex-dialect 'biblatex)

(setq bibtex-completion-format-citation-functions
      '((org-mode      . bibtex-completion-format-citation-org-link-to-PDF)
        (latex-mode    . bibtex-completion-format-citation-cite)
        (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
        (default       . bibtex-completion-format-citation-default)))
#+END_SRC

#+RESULTS:
: ((org-mode . bibtex-completion-format-citation-org-link-to-PDF) (latex-mode . bibtex-completion-format-citation-cite) (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc) (default . bibtex-completion-format-citation-default))



** evil interactive
#+BEGIN_SRC elisp
(evil-define-key nil evil-insert-state-map
  "\C-n" 'evil-next-visual-line
  "\C-p" 'evil-previous-visual-line
  "\C-f" 'evil-forward-char
  "\C-b" 'evil-backward-char
  "\C-k" 'kill-line)
#+END_SRC

* completion
#+BEGIN_SRC elisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC elisp
(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+END_SRC

#+RESULTS:
| company-box-mode | evil-normalize-keymaps | +company | init-backends | company-mode-set-explicitly | company-prescient-mode |


* org



** toc org
#+BEGIN_SRC elisp
(if (require 'toc-org nil t)
    (add-hook 'org-mode-hook 'toc-org-mode)
  (warn "toc-org not found"))
#+END_SRC

#+RESULTS:
| toc-org-mode | org-ref-org-menu | er/add-org-mode-expansions | org-clock-load | (closure (t) (&rest _) (add-hook (quote before-save-hook) (quote org-encrypt-entries) nil t)) | evil-org-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-bullets-mode | org-indent-mode | toc-org-enable | auto-fill-mode | doom | disable-show-paren-mode | doom | disable-show-trailing-whitespace | +org | enable-auto-reformat-tables | +org | enable-auto-update-cookies | +org | unfold-to-2nd-level-or-point | +evil | embrace-latex-mode-hook | embrace-org-mode-hook | org-eldoc-load | org-ref-setup-label-finders |


**  org publish
#+BEGIN_SRC elisp
(require 'ox-publish)
(setq org-publish-project-alist
      '(("org-notes"
         :base-directory "~/.personal/org/"
         :base-extension "org"
         :publishing-directory "~/.personal/public_html/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
        ("org-static"
         :base-directory "~/.personal/org/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/.personal/public_html/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("org" :components ("org-notes" "org-static"))

        ("spirou-inherit"
         :base-directory "~/.personal/org/"
         :recursive t
         :base-extension "css\\|js"
         :publishing-directory "~/spirou/publish"
         :publishing-function org-publish-attachment
         )

        ("spip-org"
         :base-directory "~/spirou/spip_ocr"
         :auto-index t
         :index-filename "sitemap.org"
         :index-title "Sitemap"
         :recursive t
         :base-extension "org"
         :publishing-directory "~/spirou/publish"
         :publishing-function org-html-publish-to-html
         :headline-levels 3
         :auto-preamble t
         )
        ("spirou-static"
         :base-directory "~/spirou/static/"
         :recursive t
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/spirou/publish/"
         :publishing-function org-publish-attachment)

        ("spirou" :components ("spirou-inherit" "spip-org" "spirou-static"))))
#+END_SRC

#+RESULTS:
| org-notes      | :base-directory | ~/.personal/org/                        | :base-extension | org  | :publishing-directory | ~/.personal/public_html/ | :recursive   | t                     | :publishing-function | org-html-publish-to-html | :headline-levels       | 4    | :auto-preamble        | t                        |                       |                          |                      |                        |                |   |
| org-static     | :base-directory | ~/.personal/org/                        | :base-extension | css\ | js\                   | png\                     | jpg\         | gif\                  | pdf\                 | mp3\                     | ogg\                   | swf  | :publishing-directory | ~/.personal/public_html/ | :recursive            | t                        | :publishing-function | org-publish-attachment |                |   |
| org            | :components     | (org-notes org-static)                  |                 |      |                       |                          |              |                       |                      |                          |                        |      |                       |                          |                       |                          |                      |                        |                |   |
| spirou-inherit | :base-directory | ~/.personal/org/                        | :recursive      | t    | :base-extension       | css\                     | js           | :publishing-directory | ~/spirou/publish     | :publishing-function     | org-publish-attachment |      |                       |                          |                       |                          |                      |                        |                |   |
| spip-org       | :base-directory | ~/spirou/spip_ocr                       | :auto-index     | t    | :index-filename       | sitemap.org              | :index-title | Sitemap               | :recursive           | t                        | :base-extension        | org  | :publishing-directory | ~/spirou/publish         | :publishing-function  | org-html-publish-to-html | :headline-levels     | 3                      | :auto-preamble | t |
| spirou-static  | :base-directory | ~/spirou/static/                        | :recursive      | t    | :base-extension       | css\                     | js\          | png\                  | jpg\                 | gif\                     | pdf\                   | mp3\ | ogg\                  | swf                      | :publishing-directory | ~/spirou/publish/        | :publishing-function | org-publish-attachment |                |   |
| spirou         | :components     | (spirou-inherit spip-org spirou-static) |                 |      |                       |                          |              |                       |                      |                          |                        |      |                       |                          |                       |                          |                      |                        |                |   |

#+BEGIN_SRC elisp
(defun org-blog-prepare (project-plist)
  "With help from `https://github.com/howardabrams/dot-files'.
  Touch `index.org' to rebuilt it.
  Argument `PROJECT-PLIST' contains information about the current project."
  (let* ((base-directory (plist-get project-plist :base-directory))
         (buffer (find-file-noselect (expand-file-name "index.org" base-directory) t)))
    (with-current-buffer buffer
      (set-buffer-modified-p t)
      (save-buffer 0))
    (kill-buffer buffer)))
#+END_SRC
#+BEGIN_SRC elisp
(defvar org-blog-head
  "<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/bootstrap.css\"/>
  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://fonts.googleapis.com/css?family=Amaranth|Handlee|Libre+Baskerville|Bree+Serif|Ubuntu+Mono|Pacifico&subset=latin,greek\"/>
  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\">")
#+END_SRC

#+BEGIN_SRC elisp

#+END_SRC
#+RESULTS:
: org-blog-head

*** mathjax
#+BEGIN_SRC elisp
(setf org-html-mathjax-options
      '((path "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
        (scale "100")
        (align "center")
        (indent "2em")
        (mathml nil))
      )
(setf org-html-mathjax-template
      "<script type=\"text/javascript\" src=\"%PATH\"></script>")
#+END_SRC

#+RESULTS:
: <script type="text/javascript" src="%PATH"></script>


** IDEA org keywords
:PROPERTIES:
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(setq org-todo-keywords
      '(
        (sequence "IDEA(i)" "TODO(t)" "STARTED(s)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)")
        (sequence "|" "CANCELED(c)" "DELEGATED(l)" "SOMEDAY(f)")
        ))

(setq org-todo-keyword-faces
      '(("IDEA" . (:foreground "GoldenRod" :weight bold))
        ("NEXT" . (:foreground "IndianRed1" :weight bold))
        ("STARTED" . (:foreground "OrangeRed" :weight bold))
        ("WAITING" . (:foreground "coral" :weight bold))
        ("CANCELED" . (:foreground "LimeGreen" :weight bold))
        ("DELEGATED" . (:foreground "LimeGreen" :weight bold))
        ("SOMEDAY" . (:foreground "LimeGreen" :weight bold))
        ))

(setq org-tag-persistent-alist
      '((:startgroup . nil)
        ("HOME" . ?h)
        ("RESEARCH" . ?r)
        ("TEACHING" . ?t)
        (:endgroup . nil)
        (:startgroup . nil)
        ("OS" . ?o)
        ("DEV" . ?d)
        ("WWW" . ?w)
        (:endgroup . nil)
        (:startgroup . nil)
        ("EASY" . ?e)
        ("MEDIUM" . ?m)
        ("HARD" . ?a)
        (:endgroup . nil)
        ("URGENT" . ?u)
        ("KEY" . ?k)
        ("BONUS" . ?b)
        ("noexport" . ?x)
        )
      )

(setq org-tag-faces
      '(
        ("HOME" . (:foreground "GoldenRod" :weight bold))
        ("RESEARCH" . (:foreground "GoldenRod" :weight bold))
        ("TEACHING" . (:foreground "GoldenRod" :weight bold))
        ("OS" . (:foreground "IndianRed1" :weight bold))
        ("DEV" . (:foreground "IndianRed1" :weight bold))
        ("WWW" . (:foreground "IndianRed1" :weight bold))
        ("URGENT" . (:foreground "Red" :weight bold))
        ("KEY" . (:foreground "Red" :weight bold))
        ("EASY" . (:foreground "OrangeRed" :weight bold))
        ("MEDIUM" . (:foreground "OrangeRed" :weight bold))
        ("HARD" . (:foreground "OrangeRed" :weight bold))
        ("BONUS" . (:foreground "GoldenRod" :weight bold))
        ("noexport" . (:foreground "LimeGreen" :weight bold))
        )
)
#+END_SRC

#+RESULTS:
| HOME     | :foreground | GoldenRod  | :weight | bold |
| RESEARCH | :foreground | GoldenRod  | :weight | bold |
| TEACHING | :foreground | GoldenRod  | :weight | bold |
| OS       | :foreground | IndianRed1 | :weight | bold |
| DEV      | :foreground | IndianRed1 | :weight | bold |
| WWW      | :foreground | IndianRed1 | :weight | bold |
| URGENT   | :foreground | Red        | :weight | bold |
| KEY      | :foreground | Red        | :weight | bold |
| EASY     | :foreground | OrangeRed  | :weight | bold |
| MEDIUM   | :foreground | OrangeRed  | :weight | bold |
| HARD     | :foreground | OrangeRed  | :weight | bold |
| BONUS    | :foreground | GoldenRod  | :weight | bold |
| noexport | :foreground | LimeGreen  | :weight | bold |


** capture


** cliplink
#+BEGIN_SRC elisp
(defun custom-org-cliplink ()
  (interactive)
  (org-cliplink-insert-transformed-title
   (org-cliplink-clipboard-content)     ;take the URL from the CLIPBOARD
   (lambda (url title)
     (let* ((parsed-url (url-generic-parse-url url)) ;parse the url
            (clean-title
             (cond
              ;; if the host is github.com, cleanup the title
              ((string= (url-host parsed-url) "github.com")
               (replace-regexp-in-string "GitHub - .*: \\(.*\\)" "\\1" title))
              ;; otherwise keep the original title
              (t title))))
       ;; forward the title to the default org-cliplink transformer
       (org-cliplink-org-mode-link-transformer url clean-title)))))
#+END_SRC


** youtube embed
:PROPERTIES:
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(defvar yt-iframe-format
  ;; You may want to change your width and height.
  (concat "<iframe width=\"440\""
          " height=\"335\""
          " src=\"https://www.youtube.com/embed/%s\""
          " frameborder=\"0\""
          " allowfullscreen>%s</iframe>"))

(org-add-link-type
 "yt"
 (lambda (handle)
   (browse-url
    (concat "https://www.youtube.com/embed/"
            handle)))
 (lambda (path desc backend)
   (cl-case backend
     (html (format yt-iframe-format
                   path (or desc "")))
     (latex (format "\href{%s}{%s}"
                    path (or desc "video"))))))
#+END_SRC

#+RESULTS:
: Created yt link.

[[yt:lEljKc9ZtU8]]
* TODO snippets
#+BEGIN_SRC elisp
;; Develop in ~/emacs.d/mysnippets, but also
;; try out snippets in ~/Downloads/interesting-snippets
(setq yas-snippet-dirs '("~/dotfiles/emacsy/mysnippets"
                           "~/dotfiles/emacsy/interesting-snippets"))

;; OR, keeping YASnippet defaults try out ~/Downloads/interesting-snippets
(setq yas-snippet-dirs (append yas-snippet-dirs
                               '("~/Downloads/interesting-snippets")))
#+END_SRC
#+BEGIN_SRC elisp
(require 'yasnippet)
(use-package yasnippet-snippets)
(require 'helm-c-yasnippet)
(setq helm-yas-space-match-any-greedy t)
(global-set-key (kbd "C-c y") 'helm-yas-complete)
(yas-global-mode 1)
(yas-load-directory "~/dotfiles/emacsy/mysnippets")
#+END_SRC

#+RESULTS:


* keybindings
#+BEGIN_SRC elisp
(global-set-key (kbd "M-p l") 'org-cliplink)
#+END_SRC

#+RESULTS:
: org-cliplink


* evil :interactive:
:PROPERTIES:
:header-args: :tangle yes
:END:

#+BEGIN_SRC elisp
(use-package evil-org
  :commands evil-org-mode
  :after org
  :init
  (add-hook 'org-mode-hook 'evil-org-mode))
#+END_SRC

#+RESULTS:
| er/add-org-mode-expansions | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-clock-load | (closure (t) (&rest _) (add-hook (quote before-save-hook) (quote org-encrypt-entries) nil t)) | evil-org-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-bullets-mode | org-indent-mode | toc-org-enable | auto-fill-mode | doom | disable-show-paren-mode | doom | disable-show-trailing-whitespace | +org | enable-auto-reformat-tables | +org | enable-auto-update-cookies | +org | unfold-to-2nd-level-or-point | +evil | embrace-latex-mode-hook | embrace-org-mode-hook | org-eldoc-load |


#+BEGIN_SRC elisp
(evil-define-key 'normal evil-org-mode-map
  "<" 'org-metaleft
  ">" 'org-metaright
  "-" 'org-cycle-list-bullet
  (kbd "TAB") 'org-cycle)
;; normal & insert state shortcuts.
(mapc (lambda (state)
        (evil-define-key state evil-org-mode-map
          (kbd "M-l") 'org-metaright
          (kbd "M-h") 'org-metaleft
          (kbd "M-k") 'org-metaup
          (kbd "M-j") 'org-metadown
          (kbd "M-L") 'org-shiftmetaright
          (kbd "M-H") 'org-shiftmetaleft
          (kbd "M-K") 'org-shiftmetaup
          (kbd "M-J") 'org-shiftmetadown))
      '(normal insert))
#+END_SRC

#+RESULTS:
| normal | insert |

*



* configs
https://emacs.christianbaeuerlein.com/my-org-config.html
