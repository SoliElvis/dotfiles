#+TITLE: DooDoo
#+AUTHOR: Frederic Boileau
#+email:frederic.boileau@protonmail.com
#+PROPERTY: ATTACH_DIR .
#+STARTUP:  inlineimages lognoteclock-out hideblocks
#+ATTR_ORG: :width 200/250/300/400/500/600
#+TODO: always(a) fixme(r) next(n) todo(t) inprog(p) stable(d) idea(i) project(j) wait(w) | broken(b)

* todo future
** always packages
*** memacs
- https://github.com/novoid/Memacs
*** zoom
  https://github.com/cyrus-and/zoom
*** org fs tree
https://emacs.stackexchange.com/questions/35274/how-to-import-directory-structure-to-org-mode-heading
*** org preview html
- https://github.com/lujun9972/org-preview-html
*** calctex
https://github.com/johnbcoughlin/calctex

*** org-mind-map
- https://github.com/theodorewiles/org-mind-map

*** org helm rifle

*** drag stuff
https://github.com/rejeep/drag-stuff.el

*** org-protocol-capture-html
https://github.com/alphapapa/org-protocol-capture-html

*** deft
https://jblevins.org/projects/deft/

*** imdb
https://www.goodreads.com/book/show/3450744-nudge

https://www.reddit.com/r/emacs/comments/9n0d0p/wikipedia_info_org_wikinforg/
** always links
https://orgmode.org/worg/org-tutorials/#org4320b02
https://sachachua.com/blog/
https://www.gnu.org/software/emacs/manual/html_mono/eintr.html
https://cestlaz.github.io/stories/emacs/


** next stabilize org-fs-tree
#+begin_src emacs-lisp
(require 'org-fs-tree)
#+end_src

#+RESULTS:
: org-fs-tree

** idea avy
** idea complete snippets

** idea printing
:PROPERTIES:
:header-args: :tangle yes
:END:
#+begin_src elisp
(require 'printing)		; load printing package
(setq pr-path-alist
	    '((unix      "." "/bin" ghostview mpage PATH)
	      (ghostview "/usr/bin/gsview")
	      (mpage     "/usr/bin/mpage")))
(setq pr-ps-name       'lps)
(setq pr-ps-printer-alist '((lpss "lp" nil "-d" "HLL2390DW")))
(pr-update-menus t)
#+end_src

** project [#A] email
** project [#B] setup web
- https://www.emacswiki.org/emacs/emacs-w3m

** project [#B] better attachment integration
- org download
- org protocol
- org attach
- org wiki assets

** project [#B] show properties as tags
-


** test

* stable basic
:PROPERTIES:
:header-args: :tangle yes
:END:
:LOGBOOK:
CLOCK: [2019-09-18 Wed 01:55]--[2019-09-18 Wed 01:55] =>  0:00
- test
:END:
** stable COMMENT basic basic
#+BEGIN_SRC elisp
(setq evil-want-C-u-scroll nil
      evil-want-C-d-scroll nil)
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
;; Files association
(setq org-file-apps
      '((auto-mode . emacs)
        ("\\.djvu\\'" . "evince \"%s\"")
         ("\\.pdf\\'" . "evince \"%s\"")))
#+END_SRC

#+RESULTS:
: ((auto-mode . emacs) (\.djvu\' . evince "%s") (\.pdf\' . evince "%s"))

** stable ui
#+BEGIN_SRC emacs-lisp
(set-default-font "Iosevka Nerd Font 12")

(set-face-attribute 'default nil :family "Iosevka Nerd Font" :height 130)
(set-face-attribute 'fixed-pitch nil :family "Iosevka Nerd Font")
(set-face-attribute 'variable-pitch nil :family "EtBembo")


(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(set-frame-parameter (selected-frame) 'alpha '(99 . 87))
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

(setq-default tab-width 2)
(setq c-basic-indent 2)
(setq artist-aspect-ratio 2.0)

(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)

(load "~/dotfiles/emacsy/packages/my-doom-themes-ext-org.el")
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
(doom-themes-org-config)
#+END_SRC

#+RESULTS:
: Enable custom fontification & improves theme integration with org-mode.

** fixme basic bindings
#+BEGIN_SRC elisp
(bind-key (kbd "M-y") 'helm-show-kill-ring)
(bind-key (kbd "M-o") 'company-complete)

(bind-key (kbd "M-p") nil)
(bind-key (kbd "M-p l") 'org-cliplink)
(bind-key (kbd "M-p v") 'org-brain-visualize)
(bind-key (kbd "M-p a") '+popup/raise)
(bind-key (kbd "M-p c") 'org-id-get-create)
(bind-key (kbd "M-p r") 'slime-repl)
#+END_SRC

** stable searching
*** swiper/ivy :melpa:github:
:PROPERTIES:
:GH:       https://github.com/abo-abo/swiper
:END:

**** small config example from github
#+begin_src elisp :tangle yes :results replace
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
;; enable this if you want `swiper' to use it
;; (setq search-default-mode #'char-fold-to-regexp)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c f") 'counsel-fzf)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
#+end_src

#+RESULTS:
: counsel-locate

- http://develop.spacemacs.org/layers/+completion/ivy/README.html

*** rg
:PROPERTIES:
:GH:       https://github.com/dajva/rg.el
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(use-package rg
  :bind (("C-c l" . 'counsel-rg)
         ("C-c r" . 'counsel-projectile-rg))
  :config
  (rg-enable-default-bindings))
#+END_SRC

#+RESULTS:
: counsel-rg

** stable doom modeline
:PROPERTIES:
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(use-package doom-modeline)
(doom-modeline-mode 1)
#+end_src

#+RESULTS:
: t

*** customize
#+begin_src elisp
(setq doom-modeline-height 25)
(setq doom-modeline-bar-width 3)
(setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
(setq doom-modeline-icon t)
(setq doom-modeline-major-mode-icon t)
(setq doom-modeline-major-mode-color-icon t)
(setq doom-modeline-persp-name t)
(setq doom-modeline-buffer-state-icon t)
(setq doom-modeline-buffer-modification-icon t)
(setq doom-modeline-minor-modes nil)
(setq doom-modeline-enable-word-count nil)
(setq doom-modeline-buffer-encoding t)
(setq doom-modeline-indent-info nil)
(setq doom-modeline-checker-simple-format t)
(setq doom-modeline-vcs-max-length 12)
(setq doom-modeline-persp-name t)
(setq doom-modeline-lsp t)
(setq doom-modeline-github nil)
(setq doom-modeline-github-interval (* 30 60))
(setq doom-modeline-env-version t)
(setq doom-modeline-env-enable-python t)
(setq doom-modeline-env-enable-ruby t)
(setq doom-modeline-env-enable-perl t)
(setq doom-modeline-env-enable-go t)
(setq doom-modeline-env-enable-elixir t)
(setq doom-modeline-env-enable-rust t)

;; Change the executables to use for the language version string
(setq doom-modeline-env-python-executable "python")
(setq doom-modeline-env-ruby-executable "ruby")
(setq doom-modeline-env-perl-executable "perl")
(setq doom-modeline-env-go-executable "go")
(setq doom-modeline-env-elixir-executable "iex")
(setq doom-modeline-env-rust-executable "rustc")
(setq doom-modeline-mu4e t)
(setq doom-modeline-irc t)
(setq doom-modeline-irc-stylize 'identity)
#+end_src

#+RESULTS:
: identity

** stable tempom
som text
#+BEGIN_SRC elisp
(require 'org-tempo)
(setq tempo-interactive t)
(tempo-define-template "my-property"
                       '(":PROPERTIES:" p ":END:" >)
                       "<p"
                       "Insert a property tempate")
(tempo-define-template "name"
                       '("#+NAME:" (p "Name : " name)  >)
                       "<n"
                       "Insert name")
(tempo-define-template "attr-org"
                       '("#+ATTR_ORG: :width 400")
                       "<o")
#+END_SRC
some text
** stable bib stuff
*** stable default files
:PROPERTIES:
:header-args: :tangle yes
:END:

#+BEGIN_SRC elisp
(setq reftex-default-bibliography '("~/.personal/.bibstuff/master-biblio.bib"))

(setq org-ref-bibliography-notes "~/.personal/.bibstuff/orgRefNotes.org"
      org-ref-default-bibliography '("~/.personal/.bibstuff/master-bib.bib")
      org-ref-pdf-directory "~/.personal/.bibstuff/bib-pdfs/")

(setq bibtex-completion-bibliography '("~/.personal/.bibstuff/master-bib.bib")
      bibtex-completion-library-path "~/.personal/.bibstuff/bib-pdfs/"
      bibtex-completion-notes-path "~/.personal/.bibstuff/helm-bibtex-notes")

(setq bibtex-completion-pdf-field "file")
(setq bibtex-completion-pdf-open-function
      (lambda (fpath)
        (start-process "evince" "*helm-bibtex-evince*" "/usr/bin/evince"
                       fpath)))

(setq bibtex-dialect 'biblatex)
#+END_SRC

*** stable completion format
:PROPERTIES:
:header-args: :tangle yes
:END:

#+BEGIN_SRC elisp
(setq bibtex-completion-format-citation-functions
      '((org-mode . bibtex-completion-format-citation-ebib)
        (latex-mode    . bibtex-completion-format-citation-cite)
        (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
        (default       . bibtex-completion-format-citation-default)))
#+END_SRC

#+RESULTS:
: ((org-mode . bibtex-completion-format-citation-ebib) (latex-mode . bibtex-completion-format-citation-cite) (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc) (default . bibtex-completion-format-citation-default))

*** idea completion display format
#+begin_src elisp
(setq bibtex-completion-display-formats
      '((article       . "${author:36} ${title:*} ${journal:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
        (inbook        . "${author:36} ${title:*} Chapter ${chapter:32} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
        (incollection  . "${author:36} ${title:*} ${booktitle:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
        (inproceedings . "${author:36} ${title:*} ${booktitle:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
        (t             . "${author:36} ${title:*} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")))
#+end_src

#+RESULTS:
: ((article . ${author:36} ${title:*} ${journal:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}) (inbook . ${author:36} ${title:*} Chapter ${chapter:32} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}) (incollection . ${author:36} ${title:*} ${booktitle:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}) (inproceedings . ${author:36} ${title:*} ${booktitle:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}) (t . ${author:36} ${title:*} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}))

** stable evil
:PROPERTIES:
:header-args: :tangle yes
:END:
some text
#+BEGIN_SRC elisp
(run-with-idle-timer 20 t 'evil-normal-state)

(setq-default
 evil-escape-key-sequence "jk"
 evil-escape-unordered-key-sequence "true")

(evil-define-key nil evil-insert-state-map
  "\C-f" 'evil-forward-char
  "\C-b" 'evil-backward-char
  "\C-k" 'kill-line
  "\C-y" 'evil-paste-after)
#+END_SRC
some text
** stable defengines
:PROPERTIES:
:header-args: :tangle yes
:END:
#+begin_src elisp
(require 'engine-mode)
(engine-mode t)

(defengine wolfram-alpha
  "http://www.wolframalpha.com/input/?i=%s")

(defengine libgen-articles
  "http://gen.lib.rus.ec/scimag/?q=%s")

(defengine libgen-books
  "http://gen.lib.rus.ec/search.php?req=%s")

(defengine wiktionary
  "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s"
  :keybinding "p")

(defengine youtube
  "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
  :keybinding "y")

(defengine goodreads
  "https://www.goodreads.com/search?q=%s"
  :keybinding "r")

(defengine wikipedia
  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
  :keybinding "w"
  :docstring "Searchin' the wikis.")

(defengine stack-overflow
  "https://stackoverflow.com/search?q=%s"
  :keybinding "s")

(defengine amazon
  "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s"
  :keybinding "a")

(defengine duckduckgo
  "https://duckduckgo.com/?q=%s"
  :keybinding "d")

(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
  :keybinding "g")

(defengine github
  "https://github.com/search?ref=simplesearch&q=%s"
  :keybinding "h")

(defengine google-maps
  "http://maps.google.com/maps?q=%s"
  :docstring "Mappin' it up."
  :keybinding "m")

(defengine project-gutenberg
  "http://www.gutenberg.org/ebooks/search/?query=%s")

(defengine rfcs
  "http://pretty-rfc.herokuapp.com/search?q=%s")

(defengine twitter
  "https://twitter.com/search?q=%s")




#+end_src

#+RESULTS:
: engine/search-twitter

* stable org
** always links
https://tasshin.com/blog/implementing-a-second-brain-in-empty-keys-and-org-mode/
https://lepisma.xyz

** stable basic set keys and variables
:PROPERTIES:
:header-args: :tangle yes
:END:
#+NAME:org-basic-set-keys
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/.personal/org")
(setq org-agenda-files '("~/.personal/org"))
(setq org-modules '(org-wikinodes org-w3m org-bbdb org-bibtex
                                  org-docview org-gnus org-info org-irc org-mhe org-rmail org-eww))

(setq org-attach-dir-relative t)
(setq org-refile-targets '((nil :maxlevel . 9)
                           (org-agenda-files :maxlevel . 9)))

(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-use-outline-path t)                  ;

(setq org-babel-lisp-eval-fn 'sly-eval)
(setq org-cycle-separator-lines 2)


(if (require 'toc-org nil t)
    (add-hook 'org-mode-hook 'toc-org-mode)
  (warn "toc-org not found"))

(setq org-blank-before-new-entry '((heading . auto) (plain-list-item . auto)))

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

(setq org-latex-pdf-process
      (list "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f %f"))

#+END_SRC
** fixme ui
mostly from https://lepisma.xyz/2017/10/28/ricing-org-mode/index.html
#+begin_src emacs-lisp
(setq org-pretty-entities t
      org-hide-emphasis-markers t
      org-fontify-whole-heading-line t
      org-fontify-quote-and-verse-blocks t)
#+end_src

#+RESULTS:
: t

** stable package one liner(ish) inits
#+begin_src elisp
(setq org-books-file "~/.personal/org/master-book-list.org")
(require 'org-attach)
(setq org-link-abbrev-alist '(("file" . org-attach-expand-link)))
(use-package org-contacts
  :after org
  :custom (org-contacts-files '("~/.personal/org/contacts.org")))
(use-package org-download :after org)
(use-package org-protocol-capture-html :after org)
#+end_src

#+RESULTS:
: org-protocol-capture-html

** stable properties
:PROPERTIES:
:header-args: :tangle yes
:END:
#+begin_src elisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
;; Log the time when a TODO item was finished
(setq org-log-done 'time)

;; Specify global tags with fast tag selection
(setq org-tag-alist '((:startgroup . nil) ("@school" . ?o) ("@home" . ?h) (:endgroup . nil)
                      ("computer" . ?c) ("reading" . ?r) ("udem" . ?u) ("!udem" . ?!) ("!aux" . ?a)
                      ("grocery" . ?g) ("homework" . ?w) ("research" . ?r)))

;; Effort and global properties
(setq org-global-properties '(("Effort_ALL". "0 0:10 0:20 0:30 1:00 1:30 2:00 3:00 4:00 6:00 8:00")))

;; Set global Column View format
(setq org-columns-default-format '"%38ITEM(Details) %TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM(Clock)")
#+end_src
** stable small utilities
#+begin_src elisp
(defun org-archive-done-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/done" 'tree))

(defun custom-org-cliplink ()
  (interactive)
  (org-cliplink-insert-transformed-title
   (org-cliplink-clipboard-content)     ;take the URL from the CLIPBOARD
   (lambda (url title)
     (let* ((parsed-url (url-generic-parse-url url)) ;parse the url
            (clean-title
             (cond
              ;; if the host is github.com, cleanup the title
              ((string= (url-host parsed-url) "github.com")
               (replace-regexp-in-string "GitHub - .*: \\(.*\\)" "\\1" title))
              ;; otherwise keep the original title
              (t title))))
       ;; forward the title to the default org-cliplink transformer
       (org-cliplink-org-mode-link-transformer url clean-title)))))
#+end_src

#+RESULTS:
: custom-org-cliplink

** stable evil
:PROPERTIES:
:header-args: :tangle yes
:END:

#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :commands evil-org-mode
  :after org
  :init
  (add-hook 'org-mode-hook 'evil-org-mode)
  :config

  (evil-define-key 'normal evil-org-mode-map
    "<" 'org-metaleft
    ">" 'org-metaright
    "-" 'org-cycle-list-bullet
    (kbd "TAB") 'org-cycle)
  ;; normal & insert state shortcuts.
  (mapc (lambda (state)
          (evil-define-key state evil-org-mode-map
            (kbd "C-;") 'ober-eval-block-in-repl
            (kbd "M-;") 'ober-eval-in-repl
            (kbd "M-l") 'org-metaright
            (kbd "M-h") 'org-metaleft
            (kbd "M-k") 'org-metaup
            (kbd "M-j") 'org-metadown
            (kbd "M-L") 'org-shiftmetaright
            (kbd "M-H") 'org-shiftmetaleft
            (kbd "M-K") 'org-shiftmetaup
            (kbd "M-J") 'org-shiftmetadown))
        '('normal 'insert)))
#+END_SRC

#+RESULTS:
: t

** stable capture                                                  :tocheck:
:PROPERTIES:
:header-args: :tangle yes
:url:      http://howardism.org/Technical/Emacs/capturing-content.html
:END:

#+srcname: capture-templates
#+BEGIN_SRC elisp
(setq org-default-notes-file (concat org-directory "notes.org"))
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/.personal/org/todo.org" "tasks")
         "* TODO %?\n:PROPERTIES:\n:Created: %U\n:Linked: %A\n:END:\n %i"
         :prepend t)

        ("s" "Started" entry (file+headline "~/.personal/org/todo.org" "tasks")
         "* STARTED %?\n %i" :clock-in t :clock-keep t :prepend t)

        ("j" "Journal" entry (file+olp+datetree "~/.personal/org/journal.org")
         "* %?\nEntered on %U\n %i\n %a")

        ("b" "Books" entry (file+headline "~/notes/books.org" "Books")
         "* %(read-string \"Title: \")\n
          :PROPERTIES: Pages: %(number-to-string (read-number \"Pages:\")):END:\n
          Author: %(read-string \"Author: \")\n")

        ("w" "Web site" entry
         (file "")
         "* %a :website:\n\n%U %?\n\n%:initial")

        ("c" "Contact" entry (file+headline "~/.personal/org/contacts.org" "Friends")
         "* %(read-string \"Name: \")\n
          :PROPERTIES:\n
          :EMAIL: %(read-string \"emacs: \")\n
          :END:")

        ("Q" "quote org capture" entry
         (file+headline ,"~/meta-wiki/mywiki/inbox.org" "browsing")
         "* %?%:description Added %U
,#+BEGIN_QUOTE
%x
,#+END_QUOTE" :immediate-finish t)))
#+END_SRC

#+RESULTS: capture-templates
| t | Todo | entry | (file+headline ~/.personal/org/todo.org tasks) | * TODO %? |

#+begin_src shell :tangle ~/apps/myScripts/org-capture-clipboard.sh
#!/bin/bash
xclip -o -selection primary | xclip -o -selection clipboard -i
emacsclient -ne '(org-capture "" "Q")' && notify-send -u low -t 2000 "Emacs" "Text Successfully Captu
#+end_src

* inprog coding/ide
** inprog completion
:PROPERTIES:
:header-args: :tangle yes
:END:
:samples:
https://gist.github.com/rswgnu/85ca5c69bb26551f3f27500855893dbe
:end:
*** company
#+BEGIN_SRC elisp
(use-package company
  :init
  (setq company-tooltip-align-annotations t)
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .2)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))
(define-key global-map (kbd "C-.") 'company-files)
#+END_SRC
*** preview ala vim                                      :tocheck:notangle:
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC elisp
(defun company-preview-if-not-tng-frontend (command)
  "`company-preview-frontend', but not when tng is active."
  (unless (and (eq command 'post-command)
               company-selection-changed
               (memq 'company-tng-frontend company-frontends))
    (company-preview-frontend command)))
#+END_SRC
*** company-box                                                   :tocheck:
#+BEGIN_SRC elisp
(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+END_SRC

*** other configs

** inprog snippets
:PROPERTIES:
:header-args: :tangle yes
:END:
- [[*yankpad][yankpad]]

*** inprog basic yas config
example:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/dotfiles/emacsy/packages/yasnippet/")
(require 'yasnippet)
(use-package yasnippet-snippets)
(use-package helm-c-yasnippet)
(setq helm-yas-space-match-any-greedy t)
(global-set-key (kbd "C-c y") 'helm-yas-complete)
(setq yas-snippet-dirs
      '("~/dotfiles/emacsy/mysnippets/"))
(yas-global-mode 1)
#+END_SRC


*** inprog yankpad                                               :notangle:
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src elisp
(use-package yankpad
  :defer 10
  :init
  (setq yankpad-file "~/.personal/org/yankpad.org")
  :config
  (bind-key "<f7>" 'yankpad-map)
  (bind-key "<f12>" 'yankpad-expand)
  ;; If you want to complete snippets using company-mode
  (add-to-list 'company-backends #'company-yankpad)
  ;; If you want to expand snippets with hippie-expand
  (add-to-list 'hippie-expand-try-functions-list #'yankpad-expand))
#+end_src

** stable languages
*** inprog onliner setups
:PROPERTIES:
:header-args: :tangle yes
:END:
#+begin_src elisp
(setq slime-contribs '(slime-fancy slime-asdf))
(setq inferior-lisp-program "sbcl --dynamic-space-size 10000")
(setq inferior-julia-program-name "/usr/bin/julia")
(setq python-python-command "/usr/bin/ipython")

(setq erlang-root-dir "/usr/lib/erlang")
(add-to-list 'load-path "/usr/lib/erlang/lib/tools-3.2.1/emacs")
(add-to-list 'load-path "~/dotfiles/emacsy/packages/stable-packages/ob-erlang")
(add-to-list 'exec-path "/usr/lib/erlang/bin")
(require 'erlang-start)
(require 'ob-erlang)
#+end_src

*** inprog ggtags
:PROPERTIES:
:header-args: :tangle yes
:END:
#+begin_src elisp
(require 'ggtags)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (ggtags-mode 1))))

(define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
(define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
(define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
(define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
(define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
(define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

(define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+end_src
*** inprog haskell
:PROPERTIES:
:header-args: :tangle yes
:END:
#+begin_src elisp
(require 'lsp)
(require 'lsp-haskell)
(require 'lsp-ui)
(add-hook 'haskell-mode-hook #'lsp)
(add-hook 'lsp-mode-hook 'lsp-ui-mode)
#+end_src

#+RESULTS:
| lsp-ui-mode |

*** stable babel
:PROPERTIES:
:header-args: :tangle yes
:END:
**** babel setup
#+BEGIN_SRC emacs-lisp
(require 'ob-shell)
(require 'ox-md)
(require 'julia-repl)
(add-hook 'julia-mode-hook 'julia-repl-mode)
(with-eval-after-load "ob"
  (require 'org-babel-eval-in-repl))
(require 'eval-in-repl)
  #+END_SRC

**** babel languages
#+BEGIN_SRC elisp
(add-to-list 'load-path
             "/home/sole/.opam/default/share/emacs/site-lisp/")
(require 'ocp-indent)
(setq org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0.11.jar")
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (ocaml . t)
   (julia . t)
   (racket . t)
   (lisp . t)
   (shell . t)
   (erlang . t)
   (js . t)
   (C . t)
   (haskell . t)
   (makefile .t)
   (scheme . t)
   (ditaa .t)))
#+END_SRC

#+RESULTS:

**** sly in org                                                 :notangle:
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src elisp
(defcustom org-babel-lisp-eval-fn
  '("slime-eval" "sly-eval")
  "The function to be called to evaluate code on the lisp side."
  :group 'org-babel
  :version "24.1"
  :type 'listp)

(defun org-babel-execute:lisp (body params)
  "Execute a block of Common Lisp code with Babel."
  (pcase org-babel-lisp-eval-fn
    ("slime-eval" (require 'slime))
    ("sly-eval" (require 'sly)))
  (org-babel-reassemble-table
   (let ((result
          (funcall (if (member "output" (cdr (assoc :result-params params)))
                       #'car #'cadr)
                   (with-temp-buffer
                     (insert (org-babel-expand-body:lisp body params))
                     (funcall org-babel-lisp-eval-fn
                              `(swank:eval-and-grab-output
                                ,(let ((dir (if (assoc :dir params)
                                                (cdr (assoc :dir params))
                                              default-directory)))
                                   (format
                                    (if dir (format org-babel-lisp-dir-fmt dir)
                                      "(progn %s\n)")
                                    (buffer-substring-no-properties
                                     (point-min) (point-max)))))
                              (cdr (assoc :package params)))))))
     (org-babel-result-cond (cdr (assoc :result-params params))
       result
       (condition-case nil
           (read (org-babel-lisp-vector-to-list result))
         (error result))))
   (org-babel-pick-name (cdr (assoc :colname-names params))
                        (cdr (assoc :colnames params)))
   (org-babel-pick-name (cdr (assoc :rowname-names params))
                        (cdr (assoc :rownames params)))))
#+end_src

#+RESULTS:
: org-babel-execute:lisp

* inprog general life
** wait mu4e
:PROPERTIES:
:link:     https://www.djcbsoftware.nl/code/mu/mu4e/Folders.html#Folders
:header-args: :tangle yes
:END:
:samples:
http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
:end:
*** main
:PROPERTIES:
:header-args: :tangle yes
:END:
#+NAME:mu4e-setup
#+begin_src emacs-lisp
(setq epg-gpg-program "gpg")
(require 'epa-file)
(epa-file-enable)
(setq auth-sources "~/.authinfo.gpg")
(setq auth-source-debug t)
(setf epa-pinentry-mode 'loopback)
(require 'mu4e)
(require 'smtpmail)

;; make sure mu4e is in your load-path
;; use mu4e for e-mail in emacs
(setq mail-user-agent 'mu4e-user-agent)
(setq mu4e-get-mail-command "offlineimap"
      mu4e-update-interval 300)

(setq mu4e-mu-home "/home/sole/.mail/outlook/udem")
(setq mu4e-maildir            "/home/sole/.mail/outlook/udem"
      mu4e-sent-folder        "/Sent"
      mu4e-drafts-folder      "/Drafts"
      mu4e-trash-folder       "/Trash"
      mu4e-refile-folder      "/Archive")

(setq mu4e-user-mail-address-list '("frederic.boileau@umontreal.ca"))
(setq mu4e-compose-reply-to-address "frederic.boileau@umontreal.ca"
      user-mail-address "frederic.boileau@umontreal.ca"
      user-full-name  "Frederic Boileau")

(setq mu4e-compose-signature
      "\n\n---frederic Boileau")

;; (setq user-mail-address "frederic.boileau@protonmail.com"
;;       user-full-name "Frederic Boileau")

(setq gnus-select-method '(nnimap "localhost"
                                  (nnimap-stream plain)
                                  (nnimap-address "127.0.0.1")
                                  (nnimap-server-port 1143)))

(setq smtpmail-default-smtp-server "127.0.0.1")
(setq mail-sources '((imap :server "127.0.0.1"
                           :user "frederic.boileau@protonmail.com"
                           :password "Um1T9PLwooU0r-jWkONqzQ")))
(require 'starttls)

(setq send-mail-function         'smtpmail-send-it
      message-send-mail-function 'smtpmail-send-it
      smtpmail-smtp-server       "127.0.0.1"
      smtpmail-smtp-service 1025
      smtpmail-debug-info t
      smtpmail-debug-verb t
      starttls-extra-arguments nil
      starttls-gnutls-program "/usr/bin/gnutls-cli"
      starttls-extra-arguments nil
      starttls-use-gnutls t
      smtpmail-auth-credentials "~/.authinfo.gpg")
(setq starttls-extra-arguments nil)

(require 'gnus-desktop-notify)
(gnus-desktop-notify-mode)
(gnus-demon-add-scanmail)
(load-library "smtpmail")
;; smtp mail setting

#+end_src

#+RESULTS: mu4e-setup
: t

*** todo new email setup different than protonmail

*** appearance
#+begin_src elisp
(require 'mu4e-contrib)
(setq mu4e-html2text-command 'mu4e-shr2text)
(setq shr-color-visible-luminance-min 60)
(setq shr-color-visible-distance-min 5)
(setq shr-use-colors nil)
(advice-add #'shr-colorize-region :around (defun shr-no-colourise-region (&rest ignore)))
#+end_src

*** outlook

#+NAME:outlook
#+ATTR_ORG: :width 300
[[file:outlook.png]]

**** getmail
#+begin_src conf :tangle ~/.getmail/getmailrc_outlook
[retriever]
type = SimpleIMAPSSLRetriever
server = outlook.office365.com
port = 993
username = frederic.boileau@umontreal.ca
password = BuYqjpK9

[destination]
type = Maildir
path = ~/.mail/outlook/udem/

[options]
verbose = 2
message_log = ~/.getmail/outlook-udem-fred.log
read_all = false
delivered_to = false
received = false
#+end_src

**** offlineimap
#+begin_src conf :tangle ~/.offlineimaprc
[general]
accounts = udem

[Account udem]
localrepository = udem-local
remoterepository = udem-remote

[Repository udem-local]
type = Maildir
localfolders = ~/.personal/mail/outlook/udem-offlineimap/

[Repository udem-remote]
type = IMAP
remoteport = 993
remotehost = outlook.office365.com
remoteuser = frederic.boileau@umontreal.ca
remotepass = BuYqjpK9
expunge = yes
ssl = yes
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
#+end_src

**** mutt
#+begin_src conf :tangle ~/.muttrc
set mbox_type   = Maildir
set sendmail    = /usr/bin/msmtp

set folder      = ~/.mail/outlook/udem-offlineimap/
set spoolfile   = "+INBOX"
set mbox        = "+[outlook-udem]/All Mail"
set postponed   = "+[outlook-udem]/Drafts"
unset record

mailboxes +INBOX
#+end_src
** project browser
https://github.com/dakrone/eos/blob/master/eos-web.org

** project org agenda/web/caldav/orgzly
** inprog mindmap stuff                                                :org:
*** inprog org-wiki
:PROPERTIES:
:header-args: :tangle yes
:END:
#+begin_src elisp
(require 'org-wiki)
(setq org-wiki-location-list
      '( "~/.personal/org/" "~/meta-wiki/mywiki/" "~/meta-wiki/blog" "~/dotfiles/"
         "~/meta-wiki/demos"))
(setq org-wiki-location (car org-wiki-location-list))

(setq org-wiki-template
      (string-trim
       "
,#+TITLE: %n
,#+AUTHOR: Frederic Boileau
,#+email:frederic.boileau@protonmail.com
,#+DESCRIPTION:
,#+KEYWORDS:
,#+DATE: %d

,#+STARTUP:  inlineimages lognoteclock-out hideblocks
,#+PROPERTY: ATTACH_DIR .
,#+STARTUP:  content
,#+ATTR_ORG: :width 200/250/300/400/500/600
,#+TODO: fixme(r) todo(t) inprog(p) stable(d) idea(i) wait(w) | broken(b)

- [[wiki:index][Index]]

- Related:

,* %n "))
#+end_src

#+RESULTS:
#+begin_example
,#+TITLE: %n
,#+AUTHOR: Frederic Boileau
,#+email:frederic.boileau@protonmail.com
,#+DESCRIPTION:
,#+KEYWORDS:
,#+DATE: %d

,#+STARTUP:  inlineimages lognoteclock-out hideblocks
,#+PROPERTY: ATTACH_DIR .
,#+STARTUP:  content
,#+ATTR_ORG: :width 200/250/300/400/500/600
,#+TODO: fixme(r) todo(t) inprog(p) stable(d) idea(i) wait(w) | broken(b)

- [[wiki:index][Index]]

- Related:

,* %n
#+end_example

*** stable brain
:PROPERTIES:
:header-args: :tangle yes
:END:
#+begin_src elisp
(use-package org-brain
  :init
  (setq org-brain-path "~/.personal/org/brain")
  ;; For Evil users
  (with-eval-after-load 'evil
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
  :config
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.personal/org/.org-id-locations")
  (push '("b" "Brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)
        org-capture-templates)
  (setq org-brain-visualize-default-choices 'all))

(defun org-brain-cliplink-resource ()
  "Add a URL from the clipboard as an org-brain resource.
Suggest the URL title as a description for resource."
  (interactive)
  (let ((url (org-cliplink-clipboard-content)))
    (org-brain-add-resource
     url
     (org-cliplink-retrieve-title-synchronously url)
     t)))

(define-key org-brain-visualize-mode-map (kbd "L") #'org-brain-cliplink-resource)

(defun org-brain-insert-resource-icon (link)
  "Insert an icon, based on content of org-mode LINK."
  (insert (format "%s "
                  (cond ((string-prefix-p "http" link)
                         (cond ((string-match "wikipedia\\.org" link)
                                (all-the-icons-faicon "wikipedia-w"))
                               ((string-match "github\\.com" link)
                                (all-the-icons-octicon "mark-github"))
                               ((string-match "vimeo\\.com" link)
                                (all-the-icons-faicon "vimeo"))
                               ((string-match "youtube\\.com" link)
                                (all-the-icons-faicon "youtube"))
                               (t
                                (all-the-icons-faicon "globe"))))
                        ((string-prefix-p "brain:" link)
                         (all-the-icons-fileicon "brain"))
                        (t
                         (all-the-icons-icon-for-file link))))))

(add-hook 'org-brain-after-resource-button-functions #'org-brain-insert-resource-icon)

(defface aa2u-face '((t . nil))
  "Face for aa2u box drawing characters")
(advice-add #'aa2u-1c :filter-return
            (lambda (str) (propertize str 'face 'aa2u-face)))
(defun aa2u-org-brain-buffer ()
  (let ((inhibit-read-only t))
    (make-local-variable 'face-remapping-alist)
    (add-to-list 'face-remapping-alist
                 '(aa2u-face . org-brain-wires))
    (ignore-errors (aa2u (point-min) (point-max)))))
(with-eval-after-load 'org-brain
  (add-hook 'org-brain-after-visualize-hook #'aa2u-org-brain-buffer))
#+end_src

** inprog publishing stuff                                             :org:
*** inprog org publish
**** stable org publish project alist
:PROPERTIES:
:header-args: :tangle yes
:END:

#+BEGIN_SRC elisp :comments link
(require 'ox-html)
(require 'ox-publish)

(setq org-publish-project-alist
      '(("blog-org"
         :base-directory "~/meta-wiki/blog"
         :base-extension "org"
         :publishing-directory "~/meta-wiki/blog/public_html/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)

        ("blog-static"
         :base-directory "~/meta-wiki/blog/static/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/meta-wiki/blog/public_html/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("blog" :components ("blog-org" "blog-static"))

        ("demos-org"
         :base-directory "~/meta-wiki/demos/"
         :base-extension "org"
         :publishing-directory "~/meta-wiki/demos/public_html/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)

        ("demos-static"
         :base-directory "~/meta-wiki/demos/static/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/meta-wiki/demos/public_html/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("demos" :components ("demos-org" "demos-static"))))
#+END_SRC

#+RESULTS:
| blog-org     | :base-directory | ~/meta-wiki/blog          | :base-extension | org  | :publishing-directory | ~/meta-wiki/blog/public_html/  | :recursive | t    | :publishing-function | org-html-publish-to-html | :headline-levels |   4 | :auto-preamble        | t                              |            |   |                      |                        |
| blog-static  | :base-directory | ~/meta-wiki/blog/static/  | :base-extension | css\ | js\                   | png\                           | jpg\       | gif\ | pdf\                 | mp3\                     | ogg\             | swf | :publishing-directory | ~/meta-wiki/blog/public_html/  | :recursive | t | :publishing-function | org-publish-attachment |
| blog         | :components     | (blog-org blog-static)    |                 |      |                       |                                |            |      |                      |                          |                  |     |                       |                                |            |   |                      |                        |
| demos-org    | :base-directory | ~/meta-wiki/demos/        | :base-extension | org  | :publishing-directory | ~/meta-wiki/demos/public_html/ | :recursive | t    | :publishing-function | org-html-publish-to-html | :headline-levels |   4 | :auto-preamble        | t                              |            |   |                      |                        |
| demos-static | :base-directory | ~/meta-wiki/demos/static/ | :base-extension | css\ | js\                   | png\                           | jpg\       | gif\ | pdf\                 | mp3\                     | ogg\             | swf | :publishing-directory | ~/meta-wiki/demos/public_html/ | :recursive | t | :publishing-function | org-publish-attachment |
| demos        | :components     | (demos-org demos-static)  |                 |      |                       |                                |            |      |                      |                          |                  |     |                       |                                |            |   |                      |                        |



**** org blog prepapre
#+BEGIN_SRC elisp
(defun org-blog-prepare (project-plist)
  "With help from `https://github.com/howardabrams/dot-files'.
  Touch `index.org' to rebuilt it.
  Argument `PROJECT-PLIST' contains information about the current project."
  (let* ((base-directory (plist-get project-plist :base-directory))
         (buffer (find-file-noselect (expand-file-name "index.org" base-directory) t)))
    (with-current-buffer buffer
      (set-buffer-modified-p t)
      (save-buffer 0))
    (kill-buffer buffer)))
#+END_SRC


**** org blog head
#+BEGIN_SRC elisp
(defvar org-blog-head
  "<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/bootstrap.css\"/>
  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://fonts.googleapis.com/css?family=Amaranth|Handlee|Libre+Baskerville|Bree+Serif|Ubuntu+Mono|Pacifico&subset=latin,greek\"/>
  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\">")
#+END_SRC


**** mathjax
#+BEGIN_SRC elisp
(setf org-html-mathjax-options
      '((path "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
        (scale "100")
        (align "center")
        (indent "2em")
        (mathml nil))
      )
(setf org-html-mathjax-template
      "<script type=\"text/javascript\" src=\"%PATH\"></script>")
#+END_SRC

#+RESULTS:
: <script type="text/javascript" src="%PATH"></script>

*** stable youtube embed
:PROPERTIES:
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(defvar yt-iframe-format
  ;; You may want to change your width and height.
  (concat "<iframe width=\"440\""
          " height=\"335\""
          " src=\"https://www.youtube.com/embed/%s\""
          " frameborder=\"0\""
          " allowfullscreen>%s</iframe>"))

(org-add-link-type
 "yt"
 (lambda (handle)
   (browse-url
    (concat "https://www.youtube.com/embed/"
            handle)))
 (lambda (path desc backend)
   (cl-case backend
     (html (format yt-iframe-format
                   path (or desc "")))
     (latex (format "\href{%s}{%s}"
                    path (or desc "video"))))))
#+END_SRC
#+NAME:yt embed example
[[yt:lEljKc9ZtU8]]



* installed package list and ref
** org-wiki
** org-download
** org-brain
** org-fs-tree
** org-super-agenda
** org-cliplink
** org-books
** org-board
** org-ref

** ide
** general text

* misc
** live code
*** free keybindings
#+begin_src elisp
;;; free-keys.el --- Show free keybindings for modkeys or prefixes

;; Copyright (C) 2013 Matus Goljer

;; Author: Matus Goljer <matus.goljer@gmail.com>
;; Maintainer: Matus Goljer <matus.goljer@gmail.com>
;; Version: 0.1
;; Created: 3rd November 2013
;; Keywords: convenience
;; Package-Requires: ((cl-lib "0.3"))
;; URL: https://github.com/Fuco1/free-keys

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Show free keybindings for modkeys or prefixes. Based on code
;; located here: https://gist.github.com/bjorne/3796607
;;
;; For complete description see https://github.com/Fuco1/free-keys

;;; Code:

(require 'cl-lib)

(defgroup free-keys ()
  "Free keys."
  :group 'convenience)

(defcustom free-keys-modifiers '("" "C" "M" "C-M")
  "List of modifiers that can be used in front of keys."
  :type '(repeat string)
  :group 'free-keys)

(defcustom free-keys-keys "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()-=[]{};'\\:\"|,./<>?`~"
  "String or list of keys that can be used as bindings.
In case of string, each letter is interpreted as a character to
test.
In case of list, each item is considered as key code.  This
allows you to add keys such as TAB or RET."
  :type '(choice
          (string :tag "String of characters")
          (repeat :tag "List of characters" string))
  :group 'free-keys)

(defcustom free-keys-ignored-bindings nil
  "List of bindings with modifiers which should never be considered free.
The elements could be either strings of form \"MOD-KEY\" or cons
where the car is a single letter modifier as in
`free-keys-modifiers' and the cdr is a string containing keys to
be ignored with this modifiers, like `free-keys-keys'.
The bindings should not contain a prefix.  This can typically be
used to ignore bindings intercepted by the window manager used
for swapping windows and similar operations."
  :type '(repeat (choice (string :tag "Key binding")
                         (cons :tag "Modifier and string of key bindings"
                               (string :tag "Modifier")
                               (string :tag "Key bindings"))))
  :group 'free-keys)

(defun free-keys-ignored-bindings ()
  "Return a list of bindings that should never be considered free.
The elements of the returned list are of form \"MOD-KEY\".
See also the variable `free-keys-ignored-bindings'."
  (apply 'append
         (mapcar (lambda (x)
                   (if (stringp x) (list x)
                     (mapcar (lambda (y)
                               (concat (car x) "-" (char-to-string y)))
                             (cdr x))))
                 free-keys-ignored-bindings)))

(defvar free-keys-mode-map
  (let ((map (make-keymap)))
    (define-key map "b" 'free-keys-change-buffer)
    (define-key map "p" 'free-keys-set-prefix)
    map)
  "Keymap for Free Keys mode.")

(defvar free-keys-original-buffer nil
  "Buffer from which `free-keys' was called.")

(defun free-keys--print-in-columns (key-list &optional columns)
  "Print the KEY-LIST into as many columns as will fit into COLUMNS characters.
The columns are ordered according to variable `free-keys-keys',
advancing down-right.  The margin between each column is 5 characters."
  (setq columns (or columns 80))
  (let* ((len (+ 5 (length (car key-list))))
         (num-of-keys (length key-list))
         (cols (/ columns len))
         (rows (1+ (/ num-of-keys cols)))
         (rem (mod num-of-keys cols))
         (cur-col 0)
         (cur-row 0))
    (dotimes (i num-of-keys)
      (insert (nth
               (+ (* cur-col rows) cur-row (if (> cur-col rem) (- rem cur-col) 0))
               key-list)
              "     ")
      (cl-incf cur-col)
      (when (= cur-col cols)
        (insert "\n")
        (setq cur-col 0)
        (cl-incf cur-row)))))

(defun free-keys-set-prefix (prefix)
  "Change the prefix in current *Free keys* buffer to PREFIX and
update the display."
  (interactive "sPrefix: ")
  (free-keys prefix free-keys-original-buffer))

(defun free-keys-change-buffer (buffer)
  "Change the buffer for which the bindings are displayed to
BUFFER and update the display."
  (interactive "bShow free bindings for buffer: ")
  (free-keys nil (get-buffer-create buffer)))

(defun free-keys-revert-buffer (_ignore-auto _noconfirm)
  "Revert the *Free keys* buffer.
This simply calls `free-keys'."
  (free-keys nil free-keys-original-buffer))

(defun free-keys--process-modifier (prefix modifier)
  "Process free bindings for MODIFIER."
  (let (empty-keys)
    (mapc (lambda (key)
            (let* ((key-as-string (cond
                                   ((characterp key) (char-to-string key))
                                   ((stringp key) key)
                                   (t (error "Key is not a character nor a string"))))
                   (key-name
                    (if (not (equal modifier ""))
                        (concat modifier "-" key-as-string)
                      key-as-string))
                   (full-name
                    (if (and prefix (not (equal prefix ""))) (concat prefix " " key-name) key-name))
                   (binding
                    (with-current-buffer free-keys-original-buffer (key-binding (read-kbd-macro full-name)))))
              (when (and (not (member key-name (free-keys-ignored-bindings)))
                         (or (not binding)
                             (eq binding 'undefined)))
                (push full-name empty-keys))))
          free-keys-keys)
    (let ((len (length empty-keys)))
      (when (> len 0)
        (if (not (equal modifier ""))
            (insert (format "With modifier %s (%d free)\n=========================\n" modifier len))
          (insert (format "With no modifier (%d free)\n=========================\n" len)))
        (free-keys--print-in-columns (nreverse empty-keys))
        (insert "\n\n")))))

;;;###autoload
(defun free-keys (&optional prefix buffer)
  "Display free keys in current buffer.
A free key is a key that has no associated key-binding as
determined by function `key-binding'.
By default, keys on `free-keys-keys' list with no prefix sequence
are considered, possibly together with modifier keys from
`free-keys-modifiers'.  You can change the prefix sequence by
hitting 'p' in the *Free keys* buffer.  Prefix is supplied in
format recognized by `kbd', for example \"C-x\"."
  (interactive (list (when current-prefix-arg
                       (read-from-minibuffer "Prefix: "))))
  (setq prefix (or prefix ""))
  (setq free-keys-original-buffer (or buffer (current-buffer)))
  (let ((buf (get-buffer-create "*Free keys*")))
    (pop-to-buffer buf)
    (with-current-buffer buf
      (if (fboundp 'read-only-mode)
          (read-only-mode -1)
        (setq buffer-read-only nil))
      (erase-buffer)
      (insert "Free keys"
              (if (not (equal prefix "")) (format " with prefix %s" prefix) "")
              " in buffer "
              (buffer-name free-keys-original-buffer)
              " (major mode: " (with-current-buffer free-keys-original-buffer (symbol-name major-mode)) ")\n\n")
      (mapc (lambda (m) (free-keys--process-modifier prefix m)) free-keys-modifiers)
      (setq buffer-read-only t)
      (goto-char 0)
      (free-keys-mode))))

(define-derived-mode free-keys-mode special-mode "Free Keys"
  "Free keys mode.
Display the free keybindings in current buffer.
\\{free-keys-mode-map}"
  (set (make-local-variable 'revert-buffer-function) 'free-keys-revert-buffer)
  (set (make-local-variable 'header-line-format) "Help: (b) change buffer (p) change prefix (q) quit"))

(provide 'free-keys)
;;; free-keys.el ends here

#+end_src

#+RESULTS:
: free-keys


*** inbuffer settings

#+NAME: Lecture 2 Wildberger Algebraic topology
#+ATTR_ORG: :width 200/250/300/400/500/600


** configs
https://github.com/rememberYou/.emacs.d/blob/master/config.org
https://emacs.christianbaeuerlein.com/my-org-config.html
http://aaronbedra.com/emacs.d/#org-habit
https://github.com/fuxialexander/doom-emacs-private-xfu/blob/master/modules/lang/org-private/config.el
https://karl-voit.at/2014/12/03/emacs-chat/
https://joshrollinswrites.com/emacsorg/org-capture-template-1/
https://github.com/daviwil/dotfiles/blob/master/emacs/config/org-mode.el



** capture-templates
