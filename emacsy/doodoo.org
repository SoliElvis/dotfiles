#+TITLE: DooDoo
#+AUTHOR: Frederic Boileau

* todo

** TODO leader key ,
** IDEA email
** IDEA projectile setup
** IDEA bookmarks setup
** NEXT rg
** IDEA complete snippets
** IDEA better captures


* basic
:PROPERTIES:
:header-args: :tangle yes
:END:

** basic basic
#+BEGIN_SRC elisp
;; Set default font
(setq org-agenda-files (directory-files-recursively "~/.personal/org/" "\.org$"))
(add-to-list 'load-path
              "~/dotfiles/emacsy/packages/yasnippet/")
(require 'yasnippet)
(yas-global-mode 1)

(use-package doom-snippets
  :load-path "~/dotfiles/emacsy/packages/doom-snippets"
  :after yasnippet)

(global-set-key (kbd "M-p l") 'org-cliplink)
(set-face-attribute 'default nil
                    :family "Inconsolata"
                    :height 120
                    :weight 'normal
                    :width 'normal)
(setq inferior-julia-program-name "/usr/bin/julia")
(setq python-python-command "/usr/bin/ipython")
(ranger-override-dired-mode t)
(setq org-cycle-separator-lines 2)

(require 'doom-themes)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled
(doom-themes-org-config)
(setq-default tab-width 2)
(setq c-basic-indent 2)

(set-frame-parameter (selected-frame) 'alpha '(100 . 90))
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)
(bind-key (kbd "M-y") 'helm-show-kill-ring)
(bind-key (kbd "M-o") 'company-complete)
(bind-key (kbd "M-p") nil)
(bind-key (kbd "M-p l") 'org-cliplink)
(load-theme 'zenburn)
#+END_SRC

#+RESULTS:
: t



** emacs xdg
#+begin_src elisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "brave")
#+end_src

#+RESULTS:
: brave


** searching

*** swiper/ivy :melpa:github:
:PROPERTIES:
:GH:       https://github.com/abo-abo/swiper
:END:

**** small config example from github
#+begin_src elisp :tangle yes :results replace
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
;; enable this if you want `swiper' to use it
;; (setq search-default-mode #'char-fold-to-regexp)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c f") 'counsel-fzf)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
#+end_src

#+RESULTS:
: counsel-locate

- http://develop.spacemacs.org/layers/+completion/ivy/README.html


*** rg
:PROPERTIES:
:GH:       https://github.com/dajva/rg.el
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(use-package rg
  :bind
  (("C-c l" . 'counsel-rg)
   ("C-c r" . 'counsel-projectile-rg'))
  :config
  (rg-enable-default-bindings))
#+END_SRC

#+RESULTS:
: counsel-rg


** doom modeline
:PROPERTIES:
:header-args: :tangle yes
:GH:       https://github.com/abo-abo/swiper
:END:
#+BEGIN_SRC elisp
(require 'doom-modeline)
(doom-modeline-mode 1)
#+end_src

*** customize
#+begin_src elisp
(setq doom-modeline-height 25)
(setq doom-modeline-bar-width 3)
(setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
(setq doom-modeline-icon t)
(setq doom-modeline-major-mode-icon t)
(setq doom-modeline-major-mode-color-icon t)
(setq doom-modeline-persp-name t)
(setq doom-modeline-buffer-state-icon t)
(setq doom-modeline-buffer-modification-icon t)
(setq doom-modeline-minor-modes nil)
(setq doom-modeline-enable-word-count nil)
(setq doom-modeline-buffer-encoding t)
(setq doom-modeline-indent-info nil)
(setq doom-modeline-checker-simple-format t)
(setq doom-modeline-vcs-max-length 12)
(setq doom-modeline-persp-name t)
(setq doom-modeline-lsp t)
(setq doom-modeline-github nil)
(setq doom-modeline-github-interval (* 30 60))
(setq doom-modeline-env-version t)
(setq doom-modeline-env-enable-python t)
(setq doom-modeline-env-enable-ruby t)
(setq doom-modeline-env-enable-perl t)
(setq doom-modeline-env-enable-go t)
(setq doom-modeline-env-enable-elixir t)
(setq doom-modeline-env-enable-rust t)

;; Change the executables to use for the language version string
(setq doom-modeline-env-python-executable "python")
(setq doom-modeline-env-ruby-executable "ruby")
(setq doom-modeline-env-perl-executable "perl")
(setq doom-modeline-env-go-executable "go")
(setq doom-modeline-env-elixir-executable "iex")
(setq doom-modeline-env-rust-executable "rustc")
(setq doom-modeline-mu4e t)
(setq doom-modeline-irc t)
(setq doom-modeline-irc-stylize 'identity)
#+end_src

#+RESULTS:
: identity


** babel
:PROPERTIES:
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(require 'ob-shell)
(require 'org-tempo)
(setq tempo-interactive t)
(require 'ox-md)
(require 'julia-repl)
(add-hook 'julia-mode-hook 'julia-repl-mode)
(with-eval-after-load "ob"
  (require 'org-babel-eval-in-repl))

#+END_SRC

#+RESULTS:
: org-babel-eval-in-repl

#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (julia . t)
   (shell . t)))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC elisp
(tempo-define-template "my-property"
                       '(":PROPERTIES:" p ":END:" >)
                       "<p"
                       "Insert a property tempate")
(tempo-define-template "name"
                       '("#+NAME:" (p "Name : " name)  n)
                       "<n"
                       "Insert name")
#+END_SRC

#+RESULTS:
: tempo-template-name




** org faces :notangle:
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC elisp
(use-package org-faces
  :after org
  :custom
  (org-todo-keyword-faces
   '(("DONE" . (:foreground "cyan" :weight bold))
     ("SOMEDAY" . (:foreground "gray" :weight bold))
     ("WAITING" . (:foreground "red" :weight bold))
     ("STARTED" . (:foreground "cyan" :weight normal))
     ("NEXT" . (:foreground "cyan" :weight bold)))))
#+END_SRC

#+RESULTS:
: org-faces


  Install Source Sans Pro."))))
       (base-font-color (face-foreground 'default nil 'default))
       (headline       `(:inherit default :weight normal :foreground ,base-font-color)))

  (custom-theme-set-faces
   'user
   `(org-level-8        ((t (,@headline ,@variable-tuple))))
   `(org-level-7        ((t (,@headline ,@variable-tuple))))
   `(org-level-6        ((t (,@headline ,@variable-tuple))))
   `(org-level-5        ((t (,@headline ,@variable-tuple))))
   `(org-level-4        ((t (,@headline ,@variable-tuple :height 1.2))))
   `(org-level-3        ((t (,@headline ,@variable-tuple :height 1.25))))
   `(org-level-2        ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-level-1        ((t (,@headline ,@variable-tuple :height 1.70))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
#+END_SRC

#+RESULTS:


** bib stuff

#+BEGIN_SRC elisp
(setq reftex-default-bibliography '("~/.personal/.bibstuff/master-biblio.bib"))

(setq org-ref-bibliography-notes "~/.personal/.bibstuff/orgRefNotes.org"
      org-ref-default-bibliography '("~/.personal/.bibstuff/master-bib.bib")
      org-ref-pdf-directory "~/.personal/zotero/storage/")

(setq bibtex-completion-bibliography '("~/.personal/.bibstuff/master-bib.bib")
      bibtex-completion-library-path "~/.personal/zotero/storage"
      bibtex-completion-notes-path "~/.personal/.bibstuff/helm-bibtex-notes")

(setq bibtex-completion-pdf-field "file")
(setq bibtex-completion-pdf-open-function
      (lambda (fpath)
        (start-process "evince" "*helm-bibtex-evince*" "/usr/bin/evince"
                       fpath)))

(setq bibtex-dialect 'biblatex)

(setq bibtex-completion-format-citation-functions
      '((org-mode      . bibtex-completion-format-citation-org-link-to-PDF)
        (latex-mode    . bibtex-completion-format-citation-cite)
        (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
        (default       . bibtex-completion-format-citation-default)))
#+END_SRC

#+RESULTS:
: ((org-mode . bibtex-completion-format-citation-org-link-to-PDF) (latex-mode . bibtex-completion-format-citation-cite) (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc) (default . bibtex-completion-format-citation-default))



** evil interactive
:PROPERTIES:
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(evil-define-key nil evil-insert-state-map
  "\C-n" 'evil-next-visual-line
  "\C-p" 'evil-previous-visual-line
  "\C-f" 'evil-forward-char
  "\C-b" 'evil-backward-char
  "\C-k" 'kill-line)
#+END_SRC

#+RESULTS:


* completion
:PROPERTIES:
:header-args: :tangle yes
:END:
*** company
#+BEGIN_SRC elisp
(use-package company
  :init
  (setq company-tooltip-align-annotations t)

  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))
(define-key global-map (kbd "C-.") 'company-files)
#+END_SRC

*** preview ala vim
#+BEGIN_SRC elisp
(defun company-preview-if-not-tng-frontend (command)
  "`company-preview-frontend', but not when tng is active."
  (unless (and (eq command 'post-command)
               company-selection-changed
               (memq 'company-tng-frontend company-frontends))
    (company-preview-frontend command)))
#+END_SRC

#+RESULTS:
: company-preview-if-not-tng-frontend

*** company-box
#+BEGIN_SRC elisp
(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+END_SRC
#+RESULTS:
| company-box-mode | +company | init-backends | evil-normalize-keymaps | company-mode-set-explicitly | company-prescient-mode |
*** other configs
https://gist.github.com/rswgnu/85ca5c69bb26551f3f27500855893dbe


* org

** basic
:PROPERTIES:
:header-args: :tangle yes
:END:

#+NAME:org-basic-set-keys
#+BEGIN_SRC elisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(setq org-directory "~/.personal/org")
(defun org-archive-done-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/DONE" 'tree))
#+END_SRC

#+RESULTS: org-basic-set-keys
: org-archive-done-tasks


** org-wiki
#+begin_src elisp
(use-package org-wiki)
(setq org-wiki-template
      (string-trim
       "
,#+TITLE: %n
,#+DESCRIPTION:
,#+KEYWORDS:
,#+STARTUP:  content
,#+DATE: %d

- [[wiki:index][Index]]

- Related:

 ,* %n
"))
(setq org-wiki-location-list
      '("~/.personal/notes"/
        "~/dotfiles/"))

;; Initialize first org-wiki-directory or default org-wiki
(setq org-wiki-location (car org-wiki-location-list))
#+end_src

#+RESULTS:
: ~/.personal/notes


** brain
:PROPERTIES:
:header-args: :tangle yes
:END:
#+begin_src elisp
(use-package org-brain
  :init
  (setq org-brain-path "~/.personal/org/brain")
  ;; For Evil users
  (with-eval-after-load 'evil
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
  :config
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.personal/org/.org-id-locations")
  (push '("b" "Brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)
        org-capture-templates)
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 12))
(defun org-brain-cliplink-resource ()
  "Add a URL from the clipboard as an org-brain resource.
Suggest the URL title as a description for resource."
  (interactive)
  (let ((url (org-cliplink-clipboard-content)))
    (org-brain-add-resource
     url
     (org-cliplink-retrieve-title-synchronously url)
     t)))

(define-key org-brain-visualize-mode-map (kbd "L") #'org-brain-cliplink-resource)

(defun org-brain-insert-resource-icon (link)
  "Insert an icon, based on content of org-mode LINK."
  (insert (format "%s "
                  (cond ((string-prefix-p "http" link)
                         (cond ((string-match "wikipedia\\.org" link)
                                (all-the-icons-faicon "wikipedia-w"))
                               ((string-match "github\\.com" link)
                                (all-the-icons-octicon "mark-github"))
                               ((string-match "vimeo\\.com" link)
                                (all-the-icons-faicon "vimeo"))
                               ((string-match "youtube\\.com" link)
                                (all-the-icons-faicon "youtube"))
                               (t
                                (all-the-icons-faicon "globe"))))
                        ((string-prefix-p "brain:" link)
                         (all-the-icons-fileicon "brain"))
                        (t
                         (all-the-icons-icon-for-file link))))))

(add-hook 'org-brain-after-resource-button-functions #'org-brain-insert-resource-icon)

(defface aa2u-face '((t . nil))
  "Face for aa2u box drawing characters")
(advice-add #'aa2u-1c :filter-return
            (lambda (str) (propertize str 'face 'aa2u-face)))
(defun aa2u-org-brain-buffer ()
  (let ((inhibit-read-only t))
    (make-local-variable 'face-remapping-alist)
    (add-to-list 'face-remapping-alist
                 '(aa2u-face . org-brain-wires))
    (ignore-errors (aa2u (point-min) (point-max)))))
(with-eval-after-load 'org-brain
  (add-hook 'org-brain-after-visualize-hook #'aa2u-org-brain-buffer))
#+end_src

#+RESULTS:
| aa2u-org-brain-buffer |


** NEXT agenda
:PROPERTIES:
:header-args: :tangle yes
:END:
#+begin_src elisp
(setq org-agenda-files '("~/.personal/org"))
#+end_src

#+RESULTS:
| ~/.personal/org |





** toc org
#+BEGIN_SRC elisp
(if (require 'toc-org nil t)
    (add-hook 'org-mode-hook 'toc-org-mode)
  (warn "toc-org not found"))
#+END_SRC

#+RESULTS:
| toc-org-mode | org-ref-org-menu | er/add-org-mode-expansions | org-clock-load | (closure (t) (&rest _) (add-hook (quote before-save-hook) (quote org-encrypt-entries) nil t)) | evil-org-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-bullets-mode | org-indent-mode | toc-org-enable | auto-fill-mode | doom | disable-show-paren-mode | doom | disable-show-trailing-whitespace | +org | enable-auto-reformat-tables | +org | enable-auto-update-cookies | +org | unfold-to-2nd-level-or-point | +evil | embrace-latex-mode-hook | embrace-org-mode-hook | org-eldoc-load | org-ref-setup-label-finders |


** org publish
#+BEGIN_SRC elisp
(require 'ox-publish)
(setq org-publish-project-alist
      '(("org-notes"
         :base-directory "~/.personal/org/"
         :base-extension "org"
         :publishing-directory "~/.personal/public_html/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
        ("org-static"
         :base-directory "~/.personal/org/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/.personal/public_html/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("org" :components ("org-notes" "org-static"))

        ("spirou-inherit"
         :base-directory "~/.personal/org/"
         :recursive t
         :base-extension "css\\|js"
         :publishing-directory "~/spirou/publish"
         :publishing-function org-publish-attachment
         )

        ("spip-org"
         :base-directory "~/spirou/spip_ocr"
         :auto-index t
         :index-filename "sitemap.org"
         :index-title "Sitemap"
         :recursive t
         :base-extension "org"
         :publishing-directory "~/spirou/publish"
         :publishing-function org-html-publish-to-html
         :headline-levels 3
         :auto-preamble t
         )
        ("spirou-static"
         :base-directory "~/spirou/static/"
         :recursive t
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/spirou/publish/"
         :publishing-function org-publish-attachment)

        ("spirou" :components ("spirou-inherit" "spip-org" "spirou-static"))))
#+END_SRC

#+RESULTS:
| org-notes      | :base-directory | ~/.personal/org/                        | :base-extension | org  | :publishing-directory | ~/.personal/public_html/ | :recursive   | t                     | :publishing-function | org-html-publish-to-html | :headline-levels       | 4    | :auto-preamble        | t                        |                       |                          |                      |                        |                |   |
| org-static     | :base-directory | ~/.personal/org/                        | :base-extension | css\ | js\                   | png\                     | jpg\         | gif\                  | pdf\                 | mp3\                     | ogg\                   | swf  | :publishing-directory | ~/.personal/public_html/ | :recursive            | t                        | :publishing-function | org-publish-attachment |                |   |
| org            | :components     | (org-notes org-static)                  |                 |      |                       |                          |              |                       |                      |                          |                        |      |                       |                          |                       |                          |                      |                        |                |   |
| spirou-inherit | :base-directory | ~/.personal/org/                        | :recursive      | t    | :base-extension       | css\                     | js           | :publishing-directory | ~/spirou/publish     | :publishing-function     | org-publish-attachment |      |                       |                          |                       |                          |                      |                        |                |   |
| spip-org       | :base-directory | ~/spirou/spip_ocr                       | :auto-index     | t    | :index-filename       | sitemap.org              | :index-title | Sitemap               | :recursive           | t                        | :base-extension        | org  | :publishing-directory | ~/spirou/publish         | :publishing-function  | org-html-publish-to-html | :headline-levels     | 3                      | :auto-preamble | t |
| spirou-static  | :base-directory | ~/spirou/static/                        | :recursive      | t    | :base-extension       | css\                     | js\          | png\                  | jpg\                 | gif\                     | pdf\                   | mp3\ | ogg\                  | swf                      | :publishing-directory | ~/spirou/publish/        | :publishing-function | org-publish-attachment |                |   |
| spirou         | :components     | (spirou-inherit spip-org spirou-static) |                 |      |                       |                          |              |                       |                      |                          |                        |      |                       |                          |                       |                          |                      |                        |                |   |

#+BEGIN_SRC elisp
(defun org-blog-prepare (project-plist)
  "With help from `https://github.com/howardabrams/dot-files'.
  Touch `index.org' to rebuilt it.
  Argument `PROJECT-PLIST' contains information about the current project."
  (let* ((base-directory (plist-get project-plist :base-directory))
         (buffer (find-file-noselect (expand-file-name "index.org" base-directory) t)))
    (with-current-buffer buffer
      (set-buffer-modified-p t)
      (save-buffer 0))
    (kill-buffer buffer)))
#+END_SRC
#+BEGIN_SRC elisp
(defvar org-blog-head
  "<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/bootstrap.css\"/>
  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://fonts.googleapis.com/css?family=Amaranth|Handlee|Libre+Baskerville|Bree+Serif|Ubuntu+Mono|Pacifico&subset=latin,greek\"/>
  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\">")
#+END_SRC

#+BEGIN_SRC elisp

#+END_SRC
#+RESULTS:
: org-blog-head

*** mathjax
#+BEGIN_SRC elisp
(setf org-html-mathjax-options
      '((path "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
        (scale "100")
        (align "center")
        (indent "2em")
        (mathml nil))
      )
(setf org-html-mathjax-template
      "<script type=\"text/javascript\" src=\"%PATH\"></script>")
#+END_SRC

#+RESULTS:
: <script type="text/javascript" src="%PATH"></script>


** STARTED org keywords
:PROPERTIES:
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(setq org-todo-keywords
      '((sequence "IDEA(i)" "TODO(t)" "STARTED(s)"
                  "NEXT(n)" "WAITING(w)" "PROJECT(p)"
                  "|" "DONE(d)" "ABRT(a)")
        (sequence "|" "CANCELED(c)" "DELEGATED(l)" "SOMEDAY(f)")))

(setq org-tag-alist
      '((:startgroup . nil)
        ("HOME" . ?h)
        ("RESEARCH" . ?r)
        ("TEACHING" . ?t)
        (:endgroup . nil)
        (:startgroup . nil)
        ("OS" . ?o)
        ("DEV" . ?d)
        ("GEEK" . ?g)
        ("WWW" . ?w)
        (:endgroup . nil)
        (:startgroup . nil)
        ("EASY" . ?e)
        ("MEDIUM" . ?m)
        ("HARD" . ?a)
        (:endgroup . nil)
        ("URGENT" . ?u)
        ("KEY" . ?k)
        ("BONUS" . ?b)
        ("noexport" . ?x)))

(setq org-tag-faces
      '(("HOME" . (:foreground "GoldenRod" :weight bold))
        ("RESEARCH" . (:foreground "GoldenRod" :weight bold))
        ("TEACHING" . (:foreground "GoldenRod" :weight bold))
        ("OS" . (:foreground "IndianRed1" :weight bold))
        ("DEV" . (:foreground "IndianRed1" :weight bold))
        ("WWW" . (:foreground "IndianRed1" :weight bold))
        ("URGENT" . (:foreground "Red" :weight bold))
        ("KEY" . (:foreground "Red" :weight bold))
        ("EASY" . (:foreground "OrangeRed" :weight bold))
        ("MEDIUM" . (:foreground "OrangeRed" :weight bold))
        ("HARD" . (:foreground "OrangeRed" :weight bold))
        ("BONUS" . (:foreground "GoldenRod" :weight bold))
        ("noexport" . (:foreground "LimeGreen" :weight bold))))
        #+END_SRC



** capture
:PROPERTIES:
:header-args: :tangle yes

#+srcname: capture-templates
#+BEGIN_SRC elisp
(setq org-default-notes-file (concat org-directory "notes.org"))
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/.personal/org/todo.org" "tasks")
         "* TODO %?\n:PROPERTIES:\n:Created: %U\n:Linked: %A\n:END:\n %i"
         :prepend t)
        ("s" "Started" entry (file+headline "~/.personal/org/todo.org" "tasks")
         "* STARTED %?\n %i" :clock-in t :clock-keep t :prepend t)
        ("j" "Journal" entry (file+datetree "~/.personal/org/journal.org")
         "* %?\nEntered on %U\n %i\n %a")))
#+END_SRC

#+RESULTS: capture-templates
| t | Todo | entry | (file+headline ~/.personal/org/todo.org tasks) | * TODO %? |


** cliplink
#+BEGIN_SRC elisp
(defun custom-org-cliplink ()
  (interactive)
  (org-cliplink-insert-transformed-title
   (org-cliplink-clipboard-content)     ;take the URL from the CLIPBOARD
   (lambda (url title)
     (let* ((parsed-url (url-generic-parse-url url)) ;parse the url
            (clean-title
             (cond
              ;; if the host is github.com, cleanup the title
              ((string= (url-host parsed-url) "github.com")
               (replace-regexp-in-string "GitHub - .*: \\(.*\\)" "\\1" title))
              ;; otherwise keep the original title
              (t title))))
       ;; forward the title to the default org-cliplink transformer
       (org-cliplink-org-mode-link-transformer url clean-title)))))
#+END_SRC


** youtube embed
:PROPERTIES:
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(defvar yt-iframe-format
  ;; You may want to change your width and height.
  (concat "<iframe width=\"440\""
          " height=\"335\""
          " src=\"https://www.youtube.com/embed/%s\""
          " frameborder=\"0\""
          " allowfullscreen>%s</iframe>"))

(org-add-link-type
 "yt"
 (lambda (handle)
   (browse-url
    (concat "https://www.youtube.com/embed/"
            handle)))
 (lambda (path desc backend)
   (cl-case backend
     (html (format yt-iframe-format
                   path (or desc "")))
     (latex (format "\href{%s}{%s}"
                    path (or desc "video"))))))
#+END_SRC

#+RESULTS:
: Created yt link.

[[yt:lEljKc9ZtU8]]


** evil
:PROPERTIES:
:header-args: :tangle yes
:END:

#+BEGIN_SRC elisp
(use-package evil-org
  :commands evil-org-mode
  :after org
  :init
  (add-hook 'org-mode-hook 'evil-org-mode))

(evil-define-key 'normal evil-org-mode-map
  "<" 'org-metaleft
  ">" 'org-metaright
  "-" 'org-cycle-list-bullet
  (kbd "TAB") 'org-cycle)
;; normal & insert state shortcuts.
(mapc (lambda (state)
        (evil-define-key state evil-org-mode-map
          (kbd "M-l") 'org-metaright
          (kbd "M-h") 'org-metaleft
          (kbd "M-k") 'org-metaup
          (kbd "M-j") 'org-metadown
          (kbd "M-L") 'org-shiftmetaright
          (kbd "M-H") 'org-shiftmetaleft
          (kbd "M-K") 'org-shiftmetaup
          (kbd "M-J") 'org-shiftmetadown))
      '('normal 'insert))
#+END_SRC

#+RESULTS:
| quote | normal |
| quote | insert |




* STARTED snippets
:PROPERTIES:
:header-args: :tangle yes
:END:
#+BEGIN_SRC elisp
(require 'yasnippet)
(use-package yasnippet-snippets)
(require 'helm-c-yasnippet)
(setq helm-yas-space-match-any-greedy t)
(global-set-key (kbd "C-c y") 'helm-yas-complete)
(yas-global-mode 1)
#+END_SRC

#+RESULTS:
: t


* free keybindings
#+begin_src elisp
;;; free-keys.el --- Show free keybindings for modkeys or prefixes

;; Copyright (C) 2013 Matus Goljer

;; Author: Matus Goljer <matus.goljer@gmail.com>
;; Maintainer: Matus Goljer <matus.goljer@gmail.com>
;; Version: 0.1
;; Created: 3rd November 2013
;; Keywords: convenience
;; Package-Requires: ((cl-lib "0.3"))
;; URL: https://github.com/Fuco1/free-keys

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Show free keybindings for modkeys or prefixes. Based on code
;; located here: https://gist.github.com/bjorne/3796607
;;
;; For complete description see https://github.com/Fuco1/free-keys

;;; Code:

(require 'cl-lib)

(defgroup free-keys ()
  "Free keys."
  :group 'convenience)

(defcustom free-keys-modifiers '("" "C" "M" "C-M")
  "List of modifiers that can be used in front of keys."
  :type '(repeat string)
  :group 'free-keys)

(defcustom free-keys-keys "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()-=[]{};'\\:\"|,./<>?`~"
  "String or list of keys that can be used as bindings.
In case of string, each letter is interpreted as a character to
test.
In case of list, each item is considered as key code.  This
allows you to add keys such as TAB or RET."
  :type '(choice
          (string :tag "String of characters")
          (repeat :tag "List of characters" string))
  :group 'free-keys)

(defcustom free-keys-ignored-bindings nil
  "List of bindings with modifiers which should never be considered free.
The elements could be either strings of form \"MOD-KEY\" or cons
where the car is a single letter modifier as in
`free-keys-modifiers' and the cdr is a string containing keys to
be ignored with this modifiers, like `free-keys-keys'.
The bindings should not contain a prefix.  This can typically be
used to ignore bindings intercepted by the window manager used
for swapping windows and similar operations."
  :type '(repeat (choice (string :tag "Key binding")
                         (cons :tag "Modifier and string of key bindings"
                               (string :tag "Modifier")
                               (string :tag "Key bindings"))))
  :group 'free-keys)

(defun free-keys-ignored-bindings ()
  "Return a list of bindings that should never be considered free.
The elements of the returned list are of form \"MOD-KEY\".
See also the variable `free-keys-ignored-bindings'."
  (apply 'append
         (mapcar (lambda (x)
                   (if (stringp x) (list x)
                     (mapcar (lambda (y)
                               (concat (car x) "-" (char-to-string y)))
                             (cdr x))))
                 free-keys-ignored-bindings)))

(defvar free-keys-mode-map
  (let ((map (make-keymap)))
    (define-key map "b" 'free-keys-change-buffer)
    (define-key map "p" 'free-keys-set-prefix)
    map)
  "Keymap for Free Keys mode.")

(defvar free-keys-original-buffer nil
  "Buffer from which `free-keys' was called.")

(defun free-keys--print-in-columns (key-list &optional columns)
  "Print the KEY-LIST into as many columns as will fit into COLUMNS characters.
The columns are ordered according to variable `free-keys-keys',
advancing down-right.  The margin between each column is 5 characters."
  (setq columns (or columns 80))
  (let* ((len (+ 5 (length (car key-list))))
         (num-of-keys (length key-list))
         (cols (/ columns len))
         (rows (1+ (/ num-of-keys cols)))
         (rem (mod num-of-keys cols))
         (cur-col 0)
         (cur-row 0))
    (dotimes (i num-of-keys)
      (insert (nth
               (+ (* cur-col rows) cur-row (if (> cur-col rem) (- rem cur-col) 0))
               key-list)
              "     ")
      (cl-incf cur-col)
      (when (= cur-col cols)
        (insert "\n")
        (setq cur-col 0)
        (cl-incf cur-row)))))

(defun free-keys-set-prefix (prefix)
  "Change the prefix in current *Free keys* buffer to PREFIX and
update the display."
  (interactive "sPrefix: ")
  (free-keys prefix free-keys-original-buffer))

(defun free-keys-change-buffer (buffer)
  "Change the buffer for which the bindings are displayed to
BUFFER and update the display."
  (interactive "bShow free bindings for buffer: ")
  (free-keys nil (get-buffer-create buffer)))

(defun free-keys-revert-buffer (_ignore-auto _noconfirm)
  "Revert the *Free keys* buffer.
This simply calls `free-keys'."
  (free-keys nil free-keys-original-buffer))

(defun free-keys--process-modifier (prefix modifier)
  "Process free bindings for MODIFIER."
  (let (empty-keys)
    (mapc (lambda (key)
            (let* ((key-as-string (cond
                                   ((characterp key) (char-to-string key))
                                   ((stringp key) key)
                                   (t (error "Key is not a character nor a string"))))
                   (key-name
                    (if (not (equal modifier ""))
                        (concat modifier "-" key-as-string)
                      key-as-string))
                   (full-name
                    (if (and prefix (not (equal prefix ""))) (concat prefix " " key-name) key-name))
                   (binding
                    (with-current-buffer free-keys-original-buffer (key-binding (read-kbd-macro full-name)))))
              (when (and (not (member key-name (free-keys-ignored-bindings)))
                         (or (not binding)
                             (eq binding 'undefined)))
                (push full-name empty-keys))))
          free-keys-keys)
    (let ((len (length empty-keys)))
      (when (> len 0)
        (if (not (equal modifier ""))
            (insert (format "With modifier %s (%d free)\n=========================\n" modifier len))
          (insert (format "With no modifier (%d free)\n=========================\n" len)))
        (free-keys--print-in-columns (nreverse empty-keys))
        (insert "\n\n")))))

;;;###autoload
(defun free-keys (&optional prefix buffer)
  "Display free keys in current buffer.
A free key is a key that has no associated key-binding as
determined by function `key-binding'.
By default, keys on `free-keys-keys' list with no prefix sequence
are considered, possibly together with modifier keys from
`free-keys-modifiers'.  You can change the prefix sequence by
hitting 'p' in the *Free keys* buffer.  Prefix is supplied in
format recognized by `kbd', for example \"C-x\"."
  (interactive (list (when current-prefix-arg
                       (read-from-minibuffer "Prefix: "))))
  (setq prefix (or prefix ""))
  (setq free-keys-original-buffer (or buffer (current-buffer)))
  (let ((buf (get-buffer-create "*Free keys*")))
    (pop-to-buffer buf)
    (with-current-buffer buf
      (if (fboundp 'read-only-mode)
          (read-only-mode -1)
        (setq buffer-read-only nil))
      (erase-buffer)
      (insert "Free keys"
              (if (not (equal prefix "")) (format " with prefix %s" prefix) "")
              " in buffer "
              (buffer-name free-keys-original-buffer)
              " (major mode: " (with-current-buffer free-keys-original-buffer (symbol-name major-mode)) ")\n\n")
      (mapc (lambda (m) (free-keys--process-modifier prefix m)) free-keys-modifiers)
      (setq buffer-read-only t)
      (goto-char 0)
      (free-keys-mode))))

(define-derived-mode free-keys-mode special-mode "Free Keys"
  "Free keys mode.
Display the free keybindings in current buffer.
\\{free-keys-mode-map}"
  (set (make-local-variable 'revert-buffer-function) 'free-keys-revert-buffer)
  (set (make-local-variable 'header-line-format) "Help: (b) change buffer (p) change prefix (q) quit"))

(provide 'free-keys)
;;; free-keys.el ends here

#+end_src

#+RESULTS:
: free-keys


* keybindings
#+BEGIN_SRC elisp
#+END_SRC

#+RESULTS:
: org-cliplink


* configs
https://emacs.christianbaeuerlein.com/my-org-config.html
http://aaronbedra.com/emacs.d/#org-habit
https://github.com/fuxialexander/doom-emacs-private-xfu/blob/master/modules/lang/org-private/config.el
